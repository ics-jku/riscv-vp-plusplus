#include "instr.h"

/*
 * NOTE RVCOMMON.01 (RV32E/RV64E)
 * We have support for RV32E and RV64E. However, new RISC-V specs, like
 * The RISC-V Instruction Set Manual Volume I: Unprivileged Architecture, Version 20240411
 * (Chapter 3) specifies registers x16-x31 as reserved -> the decoder should check the registers
 * and trap if they are used.
 * TODO: Add REQUIRE_ISA(I) check for x16-x31 as values for rd, rs1 and rs2! (see
 * NOTE RVCOMMON.01 at REQUIRE_ISA below)
 */

#include <cassert>
#include <stdexcept>

#include "trap.h"
#include "util/common.h"

constexpr uint32_t LUI_MASK = 0b00000000000000000000000001111111;
constexpr uint32_t LUI_ENCODING = 0b00000000000000000000000000110111;
constexpr uint32_t AUIPC_MASK = 0b00000000000000000000000001111111;
constexpr uint32_t AUIPC_ENCODING = 0b00000000000000000000000000010111;
constexpr uint32_t JAL_MASK = 0b00000000000000000000000001111111;
constexpr uint32_t JAL_ENCODING = 0b00000000000000000000000001101111;
constexpr uint32_t JALR_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t JALR_ENCODING = 0b00000000000000000000000001100111;
constexpr uint32_t BEQ_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t BEQ_ENCODING = 0b00000000000000000000000001100011;
constexpr uint32_t BNE_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t BNE_ENCODING = 0b00000000000000000001000001100011;
constexpr uint32_t BLT_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t BLT_ENCODING = 0b00000000000000000100000001100011;
constexpr uint32_t BGE_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t BGE_ENCODING = 0b00000000000000000101000001100011;
constexpr uint32_t BLTU_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t BLTU_ENCODING = 0b00000000000000000110000001100011;
constexpr uint32_t BGEU_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t BGEU_ENCODING = 0b00000000000000000111000001100011;
constexpr uint32_t LB_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LB_ENCODING = 0b00000000000000000000000000000011;
constexpr uint32_t LH_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LH_ENCODING = 0b00000000000000000001000000000011;
constexpr uint32_t LW_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LW_ENCODING = 0b00000000000000000010000000000011;
constexpr uint32_t LBU_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LBU_ENCODING = 0b00000000000000000100000000000011;
constexpr uint32_t LHU_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LHU_ENCODING = 0b00000000000000000101000000000011;
constexpr uint32_t SB_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t SB_ENCODING = 0b00000000000000000000000000100011;
constexpr uint32_t SH_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t SH_ENCODING = 0b00000000000000000001000000100011;
constexpr uint32_t SW_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t SW_ENCODING = 0b00000000000000000010000000100011;
constexpr uint32_t ADDI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t ADDI_ENCODING = 0b00000000000000000000000000010011;
constexpr uint32_t SLTI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t SLTI_ENCODING = 0b00000000000000000010000000010011;
constexpr uint32_t SLTIU_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t SLTIU_ENCODING = 0b00000000000000000011000000010011;
constexpr uint32_t XORI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t XORI_ENCODING = 0b00000000000000000100000000010011;
constexpr uint32_t ORI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t ORI_ENCODING = 0b00000000000000000110000000010011;
constexpr uint32_t ANDI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t ANDI_ENCODING = 0b00000000000000000111000000010011;
//-- RV64 special case (one less mask bit compared to RV32)
constexpr uint32_t SLLI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t SLLI_ENCODING = 0b00000000000000000001000000010011;
constexpr uint32_t SRLI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t SRLI_ENCODING = 0b00000000000000000101000000010011;
constexpr uint32_t SRAI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t SRAI_ENCODING = 0b01000000000000000101000000010011;
//-- RV32 case
constexpr uint32_t SLLI_32_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SLLI_32_ENCODING = 0b00000000000000000001000000010011;
constexpr uint32_t SRLI_32_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRLI_32_ENCODING = 0b00000000000000000101000000010011;
constexpr uint32_t SRAI_32_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRAI_32_ENCODING = 0b01000000000000000101000000010011;
//--
constexpr uint32_t ADD_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t ADD_ENCODING = 0b00000000000000000000000000110011;
constexpr uint32_t SUB_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SUB_ENCODING = 0b01000000000000000000000000110011;
constexpr uint32_t SLL_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SLL_ENCODING = 0b00000000000000000001000000110011;
constexpr uint32_t SLT_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SLT_ENCODING = 0b00000000000000000010000000110011;
constexpr uint32_t SLTU_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SLTU_ENCODING = 0b00000000000000000011000000110011;
constexpr uint32_t XOR_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t XOR_ENCODING = 0b00000000000000000100000000110011;
constexpr uint32_t SRL_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRL_ENCODING = 0b00000000000000000101000000110011;
constexpr uint32_t SRA_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRA_ENCODING = 0b01000000000000000101000000110011;
constexpr uint32_t OR_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t OR_ENCODING = 0b00000000000000000110000000110011;
constexpr uint32_t AND_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t AND_ENCODING = 0b00000000000000000111000000110011;
constexpr uint32_t FENCE_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FENCE_ENCODING = 0b00000000000000000000000000001111;
constexpr uint32_t FENCE_I_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FENCE_I_ENCODING = 0b00000000000000000001000000001111;
constexpr uint32_t ECALL_MASK = 0b11111111111111111111111111111111;
constexpr uint32_t ECALL_ENCODING = 0b00000000000000000000000001110011;
constexpr uint32_t EBREAK_MASK = 0b11111111111111111111111111111111;
constexpr uint32_t EBREAK_ENCODING = 0b00000000000100000000000001110011;
constexpr uint32_t CSRRW_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t CSRRW_ENCODING = 0b00000000000000000001000001110011;
constexpr uint32_t CSRRS_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t CSRRS_ENCODING = 0b00000000000000000010000001110011;
constexpr uint32_t CSRRC_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t CSRRC_ENCODING = 0b00000000000000000011000001110011;
constexpr uint32_t CSRRWI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t CSRRWI_ENCODING = 0b00000000000000000101000001110011;
constexpr uint32_t CSRRSI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t CSRRSI_ENCODING = 0b00000000000000000110000001110011;
constexpr uint32_t CSRRCI_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t CSRRCI_ENCODING = 0b00000000000000000111000001110011;
constexpr uint32_t MUL_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t MUL_ENCODING = 0b00000010000000000000000000110011;
constexpr uint32_t MULH_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t MULH_ENCODING = 0b00000010000000000001000000110011;
constexpr uint32_t MULHSU_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t MULHSU_ENCODING = 0b00000010000000000010000000110011;
constexpr uint32_t MULHU_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t MULHU_ENCODING = 0b00000010000000000011000000110011;
constexpr uint32_t DIV_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t DIV_ENCODING = 0b00000010000000000100000000110011;
constexpr uint32_t DIVU_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t DIVU_ENCODING = 0b00000010000000000101000000110011;
constexpr uint32_t REM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t REM_ENCODING = 0b00000010000000000110000000110011;
constexpr uint32_t REMU_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t REMU_ENCODING = 0b00000010000000000111000000110011;
constexpr uint32_t LR_W_MASK = 0b11111001111100000111000001111111;
constexpr uint32_t LR_W_ENCODING = 0b00010000000000000010000000101111;
constexpr uint32_t SC_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t SC_W_ENCODING = 0b00011000000000000010000000101111;
constexpr uint32_t AMOSWAP_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOSWAP_W_ENCODING = 0b00001000000000000010000000101111;
constexpr uint32_t AMOADD_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOADD_W_ENCODING = 0b00000000000000000010000000101111;
constexpr uint32_t AMOXOR_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOXOR_W_ENCODING = 0b00100000000000000010000000101111;
constexpr uint32_t AMOAND_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOAND_W_ENCODING = 0b01100000000000000010000000101111;
constexpr uint32_t AMOOR_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOOR_W_ENCODING = 0b01000000000000000010000000101111;
constexpr uint32_t AMOMIN_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMIN_W_ENCODING = 0b10000000000000000010000000101111;
constexpr uint32_t AMOMAX_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMAX_W_ENCODING = 0b10100000000000000010000000101111;
constexpr uint32_t AMOMINU_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMINU_W_ENCODING = 0b11000000000000000010000000101111;
constexpr uint32_t AMOMAXU_W_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMAXU_W_ENCODING = 0b11100000000000000010000000101111;
constexpr uint32_t URET_MASK = 0b11111111111111111111111111111111;
constexpr uint32_t URET_ENCODING = 0b00000000001000000000000001110011;
constexpr uint32_t SRET_MASK = 0b11111111111111111111111111111111;
constexpr uint32_t SRET_ENCODING = 0b00010000001000000000000001110011;
constexpr uint32_t MRET_MASK = 0b11111111111111111111111111111111;
constexpr uint32_t MRET_ENCODING = 0b00110000001000000000000001110011;
constexpr uint32_t WFI_MASK = 0b11111111111111111111111111111111;
constexpr uint32_t WFI_ENCODING = 0b00010000010100000000000001110011;
constexpr uint32_t SFENCE_VMA_MASK = 0b11111110000000000111111111111111;
constexpr uint32_t SFENCE_VMA_ENCODING = 0b00010010000000000000000001110011;

//-- RV64IMA Extension
constexpr uint32_t LWU_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LWU_ENCODING = 0b00000000000000000110000000000011;
constexpr uint32_t LD_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t LD_ENCODING = 0b00000000000000000011000000000011;
constexpr uint32_t SD_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t SD_ENCODING = 0b00000000000000000011000000100011;
constexpr uint32_t ADDIW_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t ADDIW_ENCODING = 0b00000000000000000000000000011011;
constexpr uint32_t SLLIW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SLLIW_ENCODING = 0b00000000000000000001000000011011;
constexpr uint32_t SRLIW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRLIW_ENCODING = 0b00000000000000000101000000011011;
constexpr uint32_t SRAIW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRAIW_ENCODING = 0b01000000000000000101000000011011;
constexpr uint32_t ADDW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t ADDW_ENCODING = 0b00000000000000000000000000111011;
constexpr uint32_t SUBW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SUBW_ENCODING = 0b01000000000000000000000000111011;
constexpr uint32_t SLLW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SLLW_ENCODING = 0b00000000000000000001000000111011;
constexpr uint32_t SRLW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRLW_ENCODING = 0b00000000000000000101000000111011;
constexpr uint32_t SRAW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t SRAW_ENCODING = 0b01000000000000000101000000111011;
constexpr uint32_t MULW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t MULW_ENCODING = 0b00000010000000000000000000111011;
constexpr uint32_t DIVW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t DIVW_ENCODING = 0b00000010000000000100000000111011;
constexpr uint32_t DIVUW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t DIVUW_ENCODING = 0b00000010000000000101000000111011;
constexpr uint32_t REMW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t REMW_ENCODING = 0b00000010000000000110000000111011;
constexpr uint32_t REMUW_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t REMUW_ENCODING = 0b00000010000000000111000000111011;
constexpr uint32_t LR_D_MASK = 0b11111001111100000111000001111111;
constexpr uint32_t LR_D_ENCODING = 0b00010000000000000011000000101111;
constexpr uint32_t SC_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t SC_D_ENCODING = 0b00011000000000000011000000101111;
constexpr uint32_t AMOSWAP_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOSWAP_D_ENCODING = 0b00001000000000000011000000101111;
constexpr uint32_t AMOADD_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOADD_D_ENCODING = 0b00000000000000000011000000101111;
constexpr uint32_t AMOXOR_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOXOR_D_ENCODING = 0b00100000000000000011000000101111;
constexpr uint32_t AMOAND_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOAND_D_ENCODING = 0b01100000000000000011000000101111;
constexpr uint32_t AMOOR_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOOR_D_ENCODING = 0b01000000000000000011000000101111;
constexpr uint32_t AMOMIN_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMIN_D_ENCODING = 0b10000000000000000011000000101111;
constexpr uint32_t AMOMAX_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMAX_D_ENCODING = 0b10100000000000000011000000101111;
constexpr uint32_t AMOMINU_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMINU_D_ENCODING = 0b11000000000000000011000000101111;
constexpr uint32_t AMOMAXU_D_MASK = 0b11111000000000000111000001111111;
constexpr uint32_t AMOMAXU_D_ENCODING = 0b11100000000000000011000000101111;

// RV32/64Zfh Extension
constexpr uint32_t FLH_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FLH_ENCODING = 0b00000000000000000001000000000111;
constexpr uint32_t FSH_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FSH_ENCODING = 0b00000000000000000001000000100111;
constexpr uint32_t FMADD_H_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FMADD_H_ENCODING = 0b00000100000000000000000001000011;
constexpr uint32_t FMSUB_H_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FMSUB_H_ENCODING = 0b00000100000000000000000001000111;
constexpr uint32_t FNMADD_H_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FNMADD_H_ENCODING = 0b00000100000000000000000001001111;
constexpr uint32_t FNMSUB_H_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FNMSUB_H_ENCODING = 0b00000100000000000000000001001011;
constexpr uint32_t FADD_H_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FADD_H_ENCODING = 0b00000100000000000000000001010011;
constexpr uint32_t FSUB_H_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FSUB_H_ENCODING = 0b00001100000000000000000001010011;
constexpr uint32_t FMUL_H_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FMUL_H_ENCODING = 0b00010100000000000000000001010011;
constexpr uint32_t FDIV_H_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FDIV_H_ENCODING = 0b00011100000000000000000001010011;
constexpr uint32_t FSQRT_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FSQRT_H_ENCODING = 0b01011100000000000000000001010011;
constexpr uint32_t FSGNJ_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJ_H_ENCODING = 0b00100100000000000000000001010011;
constexpr uint32_t FSGNJN_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJN_H_ENCODING = 0b00100100000000000001000001010011;
constexpr uint32_t FSGNJX_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJX_H_ENCODING = 0b00100100000000000010000001010011;
constexpr uint32_t FMIN_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FMIN_H_ENCODING = 0b00101100000000000000000001010011;
constexpr uint32_t FMAX_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FMAX_H_ENCODING = 0b00101100000000000001000001010011;
constexpr uint32_t FCVT_W_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_W_H_ENCODING = 0b11000100000000000000000001010011;
constexpr uint32_t FCVT_WU_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_WU_H_ENCODING = 0b11000100000100000000000001010011;
constexpr uint32_t FMV_X_H_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FMV_X_H_ENCODING = 0b11100100000000000000000001010011;
constexpr uint32_t FEQ_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FEQ_H_ENCODING = 0b10100100000000000010000001010011;
constexpr uint32_t FLT_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FLT_H_ENCODING = 0b10100100000000000001000001010011;
constexpr uint32_t FLE_H_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FLE_H_ENCODING = 0b10100100000000000000000001010011;
constexpr uint32_t FCLASS_H_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FCLASS_H_ENCODING = 0b11100100000000000001000001010011;
constexpr uint32_t FCVT_H_W_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_H_W_ENCODING = 0b11010100000000000000000001010011;
constexpr uint32_t FCVT_H_WU_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_H_WU_ENCODING = 0b11010100000100000000000001010011;
constexpr uint32_t FMV_H_X_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FMV_H_X_ENCODING = 0b11110100000000000000000001010011;
constexpr uint32_t FCVT_H_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_H_S_ENCODING = 0b01000100000000000000000001010011;
constexpr uint32_t FCVT_S_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_S_H_ENCODING = 0b01000000001000000000000001010011;
constexpr uint32_t FCVT_H_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_H_D_ENCODING = 0b01000100000100000000000001010011;
constexpr uint32_t FCVT_D_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_D_H_ENCODING = 0b01000010001000000000000001010011;
constexpr uint32_t FCVT_L_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_L_H_ENCODING = 0b11000100001000000000000001010011;
constexpr uint32_t FCVT_LU_H_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_LU_H_ENCODING = 0b11000100001100000000000001010011;
constexpr uint32_t FCVT_H_L_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_H_L_ENCODING = 0b11010100001000000000000001010011;
constexpr uint32_t FCVT_H_LU_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_H_LU_ENCODING = 0b11010100001100000000000001010011;

// RV32/64FD Extension
constexpr uint32_t FLW_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FLW_ENCODING = 0b00000000000000000010000000000111;
constexpr uint32_t FSW_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FSW_ENCODING = 0b00000000000000000010000000100111;
constexpr uint32_t FMADD_S_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FMADD_S_ENCODING = 0b00000000000000000000000001000011;
constexpr uint32_t FMSUB_S_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FMSUB_S_ENCODING = 0b00000000000000000000000001000111;
constexpr uint32_t FNMADD_S_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FNMADD_S_ENCODING = 0b00000000000000000000000001001111;
constexpr uint32_t FNMSUB_S_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FNMSUB_S_ENCODING = 0b00000000000000000000000001001011;
constexpr uint32_t FADD_S_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FADD_S_ENCODING = 0b00000000000000000000000001010011;
constexpr uint32_t FSUB_S_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FSUB_S_ENCODING = 0b00001000000000000000000001010011;
constexpr uint32_t FMUL_S_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FMUL_S_ENCODING = 0b00010000000000000000000001010011;
constexpr uint32_t FDIV_S_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FDIV_S_ENCODING = 0b00011000000000000000000001010011;
constexpr uint32_t FSQRT_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FSQRT_S_ENCODING = 0b01011000000000000000000001010011;
constexpr uint32_t FSGNJ_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJ_S_ENCODING = 0b00100000000000000000000001010011;
constexpr uint32_t FSGNJN_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJN_S_ENCODING = 0b00100000000000000001000001010011;
constexpr uint32_t FSGNJX_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJX_S_ENCODING = 0b00100000000000000010000001010011;
constexpr uint32_t FMIN_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FMIN_S_ENCODING = 0b00101000000000000000000001010011;
constexpr uint32_t FMAX_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FMAX_S_ENCODING = 0b00101000000000000001000001010011;
constexpr uint32_t FCVT_W_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_W_S_ENCODING = 0b11000000000000000000000001010011;
constexpr uint32_t FCVT_WU_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_WU_S_ENCODING = 0b11000000000100000000000001010011;
constexpr uint32_t FMV_X_W_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FMV_X_W_ENCODING = 0b11100000000000000000000001010011;
constexpr uint32_t FEQ_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FEQ_S_ENCODING = 0b10100000000000000010000001010011;
constexpr uint32_t FLT_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FLT_S_ENCODING = 0b10100000000000000001000001010011;
constexpr uint32_t FLE_S_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FLE_S_ENCODING = 0b10100000000000000000000001010011;
constexpr uint32_t FCLASS_S_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FCLASS_S_ENCODING = 0b11100000000000000001000001010011;
constexpr uint32_t FCVT_S_W_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_S_W_ENCODING = 0b11010000000000000000000001010011;
constexpr uint32_t FCVT_S_WU_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_S_WU_ENCODING = 0b11010000000100000000000001010011;
constexpr uint32_t FMV_W_X_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FMV_W_X_ENCODING = 0b11110000000000000000000001010011;
constexpr uint32_t FCVT_L_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_L_S_ENCODING = 0b11000000001000000000000001010011;
constexpr uint32_t FCVT_LU_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_LU_S_ENCODING = 0b11000000001100000000000001010011;
constexpr uint32_t FCVT_S_L_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_S_L_ENCODING = 0b11010000001000000000000001010011;
constexpr uint32_t FCVT_S_LU_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_S_LU_ENCODING = 0b11010000001100000000000001010011;
constexpr uint32_t FLD_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FLD_ENCODING = 0b00000000000000000011000000000111;
constexpr uint32_t FSD_MASK = 0b00000000000000000111000001111111;
constexpr uint32_t FSD_ENCODING = 0b00000000000000000011000000100111;
constexpr uint32_t FMADD_D_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FMADD_D_ENCODING = 0b00000010000000000000000001000011;
constexpr uint32_t FMSUB_D_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FMSUB_D_ENCODING = 0b00000010000000000000000001000111;
constexpr uint32_t FNMSUB_D_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FNMSUB_D_ENCODING = 0b00000010000000000000000001001011;
constexpr uint32_t FNMADD_D_MASK = 0b00000110000000000000000001111111;
constexpr uint32_t FNMADD_D_ENCODING = 0b00000010000000000000000001001111;
constexpr uint32_t FADD_D_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FADD_D_ENCODING = 0b00000010000000000000000001010011;
constexpr uint32_t FSUB_D_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FSUB_D_ENCODING = 0b00001010000000000000000001010011;
constexpr uint32_t FMUL_D_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FMUL_D_ENCODING = 0b00010010000000000000000001010011;
constexpr uint32_t FDIV_D_MASK = 0b11111110000000000000000001111111;
constexpr uint32_t FDIV_D_ENCODING = 0b00011010000000000000000001010011;
constexpr uint32_t FSQRT_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FSQRT_D_ENCODING = 0b01011010000000000000000001010011;
constexpr uint32_t FSGNJ_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJ_D_ENCODING = 0b00100010000000000000000001010011;
constexpr uint32_t FSGNJN_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJN_D_ENCODING = 0b00100010000000000001000001010011;
constexpr uint32_t FSGNJX_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FSGNJX_D_ENCODING = 0b00100010000000000010000001010011;
constexpr uint32_t FMIN_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FMIN_D_ENCODING = 0b00101010000000000000000001010011;
constexpr uint32_t FMAX_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FMAX_D_ENCODING = 0b00101010000000000001000001010011;
constexpr uint32_t FCVT_S_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_S_D_ENCODING = 0b01000000000100000000000001010011;
constexpr uint32_t FCVT_D_S_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_D_S_ENCODING = 0b01000010000000000000000001010011;
constexpr uint32_t FEQ_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FEQ_D_ENCODING = 0b10100010000000000010000001010011;
constexpr uint32_t FLT_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FLT_D_ENCODING = 0b10100010000000000001000001010011;
constexpr uint32_t FLE_D_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t FLE_D_ENCODING = 0b10100010000000000000000001010011;
constexpr uint32_t FCLASS_D_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FCLASS_D_ENCODING = 0b11100010000000000001000001010011;
constexpr uint32_t FCVT_W_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_W_D_ENCODING = 0b11000010000000000000000001010011;
constexpr uint32_t FCVT_WU_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_WU_D_ENCODING = 0b11000010000100000000000001010011;
constexpr uint32_t FCVT_D_W_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_D_W_ENCODING = 0b11010010000000000000000001010011;
constexpr uint32_t FCVT_D_WU_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_D_WU_ENCODING = 0b11010010000100000000000001010011;
constexpr uint32_t FCVT_L_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_L_D_ENCODING = 0b11000010001000000000000001010011;
constexpr uint32_t FCVT_LU_D_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_LU_D_ENCODING = 0b11000010001100000000000001010011;
constexpr uint32_t FMV_X_D_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FMV_X_D_ENCODING = 0b11100010000000000000000001010011;
constexpr uint32_t FCVT_D_L_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_D_L_ENCODING = 0b11010010001000000000000001010011;
constexpr uint32_t FCVT_D_LU_MASK = 0b11111111111100000000000001111111;
constexpr uint32_t FCVT_D_LU_ENCODING = 0b11010010001100000000000001010011;
constexpr uint32_t FMV_D_X_MASK = 0b11111111111100000111000001111111;
constexpr uint32_t FMV_D_X_ENCODING = 0b11110010000000000000000001010011;
// RV-V Extension Start -- Placeholder 0
constexpr uint32_t VSETVLI_ENCODING = 0b111000001010111;
constexpr uint32_t VSETVLI_MASK = 0b10000000000000000111000001111111;
constexpr uint32_t VSETIVLI_ENCODING = 0b11000000000000000111000001010111;
constexpr uint32_t VSETIVLI_MASK = 0b11000000000000000111000001111111;
constexpr uint32_t VSETVL_ENCODING = 0b10000000000000000111000001010111;
constexpr uint32_t VSETVL_MASK = 0b11000000000000000111000001111111;
constexpr uint32_t VLM_V_ENCODING = 0b101100000000000000000111;
constexpr uint32_t VLM_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSM_V_ENCODING = 0b101100000000000000100111;
constexpr uint32_t VSM_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE8_V_ENCODING = 0b111;
constexpr uint32_t VLE8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE16_V_ENCODING = 0b101000000000111;
constexpr uint32_t VLE16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE32_V_ENCODING = 0b110000000000111;
constexpr uint32_t VLE32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE64_V_ENCODING = 0b111000000000111;
constexpr uint32_t VLE64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSE8_V_ENCODING = 0b100111;
constexpr uint32_t VSE8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSE16_V_ENCODING = 0b101000000100111;
constexpr uint32_t VSE16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSE32_V_ENCODING = 0b110000000100111;
constexpr uint32_t VSE32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSE64_V_ENCODING = 0b111000000100111;
constexpr uint32_t VSE64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSE8_V_ENCODING = 0b1000000000000000000000000111;
constexpr uint32_t VLSE8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSE16_V_ENCODING = 0b1000000000000101000000000111;
constexpr uint32_t VLSE16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSE32_V_ENCODING = 0b1000000000000110000000000111;
constexpr uint32_t VLSE32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSE64_V_ENCODING = 0b1000000000000111000000000111;
constexpr uint32_t VLSE64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSE8_V_ENCODING = 0b1000000000000000000000100111;
constexpr uint32_t VSSE8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSE16_V_ENCODING = 0b1000000000000101000000100111;
constexpr uint32_t VSSE16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSE32_V_ENCODING = 0b1000000000000110000000100111;
constexpr uint32_t VSSE32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSE64_V_ENCODING = 0b1000000000000111000000100111;
constexpr uint32_t VSSE64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXEI8_V_ENCODING = 0b100000000000000000000000111;
constexpr uint32_t VLUXEI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXEI16_V_ENCODING = 0b100000000000101000000000111;
constexpr uint32_t VLUXEI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXEI32_V_ENCODING = 0b100000000000110000000000111;
constexpr uint32_t VLUXEI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXEI64_V_ENCODING = 0b100000000000111000000000111;
constexpr uint32_t VLUXEI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXEI8_V_ENCODING = 0b1100000000000000000000000111;
constexpr uint32_t VLOXEI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXEI16_V_ENCODING = 0b1100000000000101000000000111;
constexpr uint32_t VLOXEI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXEI32_V_ENCODING = 0b1100000000000110000000000111;
constexpr uint32_t VLOXEI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXEI64_V_ENCODING = 0b1100000000000111000000000111;
constexpr uint32_t VLOXEI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXEI8_V_ENCODING = 0b100000000000000000000100111;
constexpr uint32_t VSUXEI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXEI16_V_ENCODING = 0b100000000000101000000100111;
constexpr uint32_t VSUXEI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXEI32_V_ENCODING = 0b100000000000110000000100111;
constexpr uint32_t VSUXEI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXEI64_V_ENCODING = 0b100000000000111000000100111;
constexpr uint32_t VSUXEI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXEI8_V_ENCODING = 0b1100000000000000000000100111;
constexpr uint32_t VSOXEI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXEI16_V_ENCODING = 0b1100000000000101000000100111;
constexpr uint32_t VSOXEI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXEI32_V_ENCODING = 0b1100000000000110000000100111;
constexpr uint32_t VSOXEI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXEI64_V_ENCODING = 0b1100000000000111000000100111;
constexpr uint32_t VSOXEI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLE8FF_V_ENCODING = 0b1000000000000000000000111;
constexpr uint32_t VLE8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE16FF_V_ENCODING = 0b1000000000101000000000111;
constexpr uint32_t VLE16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE32FF_V_ENCODING = 0b1000000000110000000000111;
constexpr uint32_t VLE32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLE64FF_V_ENCODING = 0b1000000000111000000000111;
constexpr uint32_t VLE64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E8_V_ENCODING = 0b100000000000000000000000000111;
constexpr uint32_t VLSEG2E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E16_V_ENCODING = 0b100000000000000101000000000111;
constexpr uint32_t VLSEG2E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E32_V_ENCODING = 0b100000000000000110000000000111;
constexpr uint32_t VLSEG2E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E64_V_ENCODING = 0b100000000000000111000000000111;
constexpr uint32_t VLSEG2E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG2E8_V_ENCODING = 0b100000000000000000000000100111;
constexpr uint32_t VSSEG2E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG2E16_V_ENCODING = 0b100000000000000101000000100111;
constexpr uint32_t VSSEG2E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG2E32_V_ENCODING = 0b100000000000000110000000100111;
constexpr uint32_t VSSEG2E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG2E64_V_ENCODING = 0b100000000000000111000000100111;
constexpr uint32_t VSSEG2E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG2E8_V_ENCODING = 0b101000000000000000000000000111;
constexpr uint32_t VLSSEG2E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG2E16_V_ENCODING = 0b101000000000000101000000000111;
constexpr uint32_t VLSSEG2E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG2E32_V_ENCODING = 0b101000000000000110000000000111;
constexpr uint32_t VLSSEG2E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG2E64_V_ENCODING = 0b101000000000000111000000000111;
constexpr uint32_t VLSSEG2E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG2E8_V_ENCODING = 0b101000000000000000000000100111;
constexpr uint32_t VSSSEG2E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG2E16_V_ENCODING = 0b101000000000000101000000100111;
constexpr uint32_t VSSSEG2E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG2E32_V_ENCODING = 0b101000000000000110000000100111;
constexpr uint32_t VSSSEG2E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG2E64_V_ENCODING = 0b101000000000000111000000100111;
constexpr uint32_t VSSSEG2E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG2EI8_V_ENCODING = 0b100100000000000000000000000111;
constexpr uint32_t VLUXSEG2EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG2EI16_V_ENCODING = 0b100100000000000101000000000111;
constexpr uint32_t VLUXSEG2EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG2EI32_V_ENCODING = 0b100100000000000110000000000111;
constexpr uint32_t VLUXSEG2EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG2EI64_V_ENCODING = 0b100100000000000111000000000111;
constexpr uint32_t VLUXSEG2EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG2EI8_V_ENCODING = 0b101100000000000000000000000111;
constexpr uint32_t VLOXSEG2EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG2EI16_V_ENCODING = 0b101100000000000101000000000111;
constexpr uint32_t VLOXSEG2EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG2EI32_V_ENCODING = 0b101100000000000110000000000111;
constexpr uint32_t VLOXSEG2EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG2EI64_V_ENCODING = 0b101100000000000111000000000111;
constexpr uint32_t VLOXSEG2EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG2EI8_V_ENCODING = 0b100100000000000000000000100111;
constexpr uint32_t VSUXSEG2EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG2EI16_V_ENCODING = 0b100100000000000101000000100111;
constexpr uint32_t VSUXSEG2EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG2EI32_V_ENCODING = 0b100100000000000110000000100111;
constexpr uint32_t VSUXSEG2EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG2EI64_V_ENCODING = 0b100100000000000111000000100111;
constexpr uint32_t VSUXSEG2EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG2EI8_V_ENCODING = 0b101100000000000000000000100111;
constexpr uint32_t VSOXSEG2EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG2EI16_V_ENCODING = 0b101100000000000101000000100111;
constexpr uint32_t VSOXSEG2EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG2EI32_V_ENCODING = 0b101100000000000110000000100111;
constexpr uint32_t VSOXSEG2EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG2EI64_V_ENCODING = 0b101100000000000111000000100111;
constexpr uint32_t VSOXSEG2EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG2E8FF_V_ENCODING = 0b100001000000000000000000000111;
constexpr uint32_t VLSEG2E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E16FF_V_ENCODING = 0b100001000000000101000000000111;
constexpr uint32_t VLSEG2E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E32FF_V_ENCODING = 0b100001000000000110000000000111;
constexpr uint32_t VLSEG2E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG2E64FF_V_ENCODING = 0b100001000000000111000000000111;
constexpr uint32_t VLSEG2E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E8_V_ENCODING = 0b1000000000000000000000000000111;
constexpr uint32_t VLSEG3E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E16_V_ENCODING = 0b1000000000000000101000000000111;
constexpr uint32_t VLSEG3E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E32_V_ENCODING = 0b1000000000000000110000000000111;
constexpr uint32_t VLSEG3E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E64_V_ENCODING = 0b1000000000000000111000000000111;
constexpr uint32_t VLSEG3E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG3E8_V_ENCODING = 0b1000000000000000000000000100111;
constexpr uint32_t VSSEG3E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG3E16_V_ENCODING = 0b1000000000000000101000000100111;
constexpr uint32_t VSSEG3E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG3E32_V_ENCODING = 0b1000000000000000110000000100111;
constexpr uint32_t VSSEG3E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG3E64_V_ENCODING = 0b1000000000000000111000000100111;
constexpr uint32_t VSSEG3E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG3E8_V_ENCODING = 0b1001000000000000000000000000111;
constexpr uint32_t VLSSEG3E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG3E16_V_ENCODING = 0b1001000000000000101000000000111;
constexpr uint32_t VLSSEG3E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG3E32_V_ENCODING = 0b1001000000000000110000000000111;
constexpr uint32_t VLSSEG3E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG3E64_V_ENCODING = 0b1001000000000000111000000000111;
constexpr uint32_t VLSSEG3E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG3E8_V_ENCODING = 0b1001000000000000000000000100111;
constexpr uint32_t VSSSEG3E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG3E16_V_ENCODING = 0b1001000000000000101000000100111;
constexpr uint32_t VSSSEG3E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG3E32_V_ENCODING = 0b1001000000000000110000000100111;
constexpr uint32_t VSSSEG3E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG3E64_V_ENCODING = 0b1001000000000000111000000100111;
constexpr uint32_t VSSSEG3E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG3EI8_V_ENCODING = 0b1000100000000000000000000000111;
constexpr uint32_t VLUXSEG3EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG3EI16_V_ENCODING = 0b1000100000000000101000000000111;
constexpr uint32_t VLUXSEG3EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG3EI32_V_ENCODING = 0b1000100000000000110000000000111;
constexpr uint32_t VLUXSEG3EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG3EI64_V_ENCODING = 0b1000100000000000111000000000111;
constexpr uint32_t VLUXSEG3EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG3EI8_V_ENCODING = 0b1001100000000000000000000000111;
constexpr uint32_t VLOXSEG3EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG3EI16_V_ENCODING = 0b1001100000000000101000000000111;
constexpr uint32_t VLOXSEG3EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG3EI32_V_ENCODING = 0b1001100000000000110000000000111;
constexpr uint32_t VLOXSEG3EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG3EI64_V_ENCODING = 0b1001100000000000111000000000111;
constexpr uint32_t VLOXSEG3EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG3EI8_V_ENCODING = 0b1000100000000000000000000100111;
constexpr uint32_t VSUXSEG3EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG3EI16_V_ENCODING = 0b1000100000000000101000000100111;
constexpr uint32_t VSUXSEG3EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG3EI32_V_ENCODING = 0b1000100000000000110000000100111;
constexpr uint32_t VSUXSEG3EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG3EI64_V_ENCODING = 0b1000100000000000111000000100111;
constexpr uint32_t VSUXSEG3EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG3EI8_V_ENCODING = 0b1001100000000000000000000100111;
constexpr uint32_t VSOXSEG3EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG3EI16_V_ENCODING = 0b1001100000000000101000000100111;
constexpr uint32_t VSOXSEG3EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG3EI32_V_ENCODING = 0b1001100000000000110000000100111;
constexpr uint32_t VSOXSEG3EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG3EI64_V_ENCODING = 0b1001100000000000111000000100111;
constexpr uint32_t VSOXSEG3EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG3E8FF_V_ENCODING = 0b1000001000000000000000000000111;
constexpr uint32_t VLSEG3E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E16FF_V_ENCODING = 0b1000001000000000101000000000111;
constexpr uint32_t VLSEG3E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E32FF_V_ENCODING = 0b1000001000000000110000000000111;
constexpr uint32_t VLSEG3E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG3E64FF_V_ENCODING = 0b1000001000000000111000000000111;
constexpr uint32_t VLSEG3E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E8_V_ENCODING = 0b1100000000000000000000000000111;
constexpr uint32_t VLSEG4E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E16_V_ENCODING = 0b1100000000000000101000000000111;
constexpr uint32_t VLSEG4E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E32_V_ENCODING = 0b1100000000000000110000000000111;
constexpr uint32_t VLSEG4E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E64_V_ENCODING = 0b1100000000000000111000000000111;
constexpr uint32_t VLSEG4E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG4E8_V_ENCODING = 0b1100000000000000000000000100111;
constexpr uint32_t VSSEG4E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG4E16_V_ENCODING = 0b1100000000000000101000000100111;
constexpr uint32_t VSSEG4E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG4E32_V_ENCODING = 0b1100000000000000110000000100111;
constexpr uint32_t VSSEG4E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG4E64_V_ENCODING = 0b1100000000000000111000000100111;
constexpr uint32_t VSSEG4E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG4E8_V_ENCODING = 0b1101000000000000000000000000111;
constexpr uint32_t VLSSEG4E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG4E16_V_ENCODING = 0b1101000000000000101000000000111;
constexpr uint32_t VLSSEG4E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG4E32_V_ENCODING = 0b1101000000000000110000000000111;
constexpr uint32_t VLSSEG4E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG4E64_V_ENCODING = 0b1101000000000000111000000000111;
constexpr uint32_t VLSSEG4E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG4E8_V_ENCODING = 0b1101000000000000000000000100111;
constexpr uint32_t VSSSEG4E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG4E16_V_ENCODING = 0b1101000000000000101000000100111;
constexpr uint32_t VSSSEG4E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG4E32_V_ENCODING = 0b1101000000000000110000000100111;
constexpr uint32_t VSSSEG4E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG4E64_V_ENCODING = 0b1101000000000000111000000100111;
constexpr uint32_t VSSSEG4E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG4EI8_V_ENCODING = 0b1100100000000000000000000000111;
constexpr uint32_t VLUXSEG4EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG4EI16_V_ENCODING = 0b1100100000000000101000000000111;
constexpr uint32_t VLUXSEG4EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG4EI32_V_ENCODING = 0b1100100000000000110000000000111;
constexpr uint32_t VLUXSEG4EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG4EI64_V_ENCODING = 0b1100100000000000111000000000111;
constexpr uint32_t VLUXSEG4EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG4EI8_V_ENCODING = 0b1101100000000000000000000000111;
constexpr uint32_t VLOXSEG4EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG4EI16_V_ENCODING = 0b1101100000000000101000000000111;
constexpr uint32_t VLOXSEG4EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG4EI32_V_ENCODING = 0b1101100000000000110000000000111;
constexpr uint32_t VLOXSEG4EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG4EI64_V_ENCODING = 0b1101100000000000111000000000111;
constexpr uint32_t VLOXSEG4EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG4EI8_V_ENCODING = 0b1100100000000000000000000100111;
constexpr uint32_t VSUXSEG4EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG4EI16_V_ENCODING = 0b1100100000000000101000000100111;
constexpr uint32_t VSUXSEG4EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG4EI32_V_ENCODING = 0b1100100000000000110000000100111;
constexpr uint32_t VSUXSEG4EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG4EI64_V_ENCODING = 0b1100100000000000111000000100111;
constexpr uint32_t VSUXSEG4EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG4EI8_V_ENCODING = 0b1101100000000000000000000100111;
constexpr uint32_t VSOXSEG4EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG4EI16_V_ENCODING = 0b1101100000000000101000000100111;
constexpr uint32_t VSOXSEG4EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG4EI32_V_ENCODING = 0b1101100000000000110000000100111;
constexpr uint32_t VSOXSEG4EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG4EI64_V_ENCODING = 0b1101100000000000111000000100111;
constexpr uint32_t VSOXSEG4EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG4E8FF_V_ENCODING = 0b1100001000000000000000000000111;
constexpr uint32_t VLSEG4E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E16FF_V_ENCODING = 0b1100001000000000101000000000111;
constexpr uint32_t VLSEG4E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E32FF_V_ENCODING = 0b1100001000000000110000000000111;
constexpr uint32_t VLSEG4E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG4E64FF_V_ENCODING = 0b1100001000000000111000000000111;
constexpr uint32_t VLSEG4E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E8_V_ENCODING = 0b10000000000000000000000000000111;
constexpr uint32_t VLSEG5E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E16_V_ENCODING = 0b10000000000000000101000000000111;
constexpr uint32_t VLSEG5E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E32_V_ENCODING = 0b10000000000000000110000000000111;
constexpr uint32_t VLSEG5E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E64_V_ENCODING = 0b10000000000000000111000000000111;
constexpr uint32_t VLSEG5E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG5E8_V_ENCODING = 0b10000000000000000000000000100111;
constexpr uint32_t VSSEG5E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG5E16_V_ENCODING = 0b10000000000000000101000000100111;
constexpr uint32_t VSSEG5E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG5E32_V_ENCODING = 0b10000000000000000110000000100111;
constexpr uint32_t VSSEG5E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG5E64_V_ENCODING = 0b10000000000000000111000000100111;
constexpr uint32_t VSSEG5E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG5E8_V_ENCODING = 0b10001000000000000000000000000111;
constexpr uint32_t VLSSEG5E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG5E16_V_ENCODING = 0b10001000000000000101000000000111;
constexpr uint32_t VLSSEG5E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG5E32_V_ENCODING = 0b10001000000000000110000000000111;
constexpr uint32_t VLSSEG5E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG5E64_V_ENCODING = 0b10001000000000000111000000000111;
constexpr uint32_t VLSSEG5E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG5E8_V_ENCODING = 0b10001000000000000000000000100111;
constexpr uint32_t VSSSEG5E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG5E16_V_ENCODING = 0b10001000000000000101000000100111;
constexpr uint32_t VSSSEG5E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG5E32_V_ENCODING = 0b10001000000000000110000000100111;
constexpr uint32_t VSSSEG5E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG5E64_V_ENCODING = 0b10001000000000000111000000100111;
constexpr uint32_t VSSSEG5E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG5EI8_V_ENCODING = 0b10000100000000000000000000000111;
constexpr uint32_t VLUXSEG5EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG5EI16_V_ENCODING = 0b10000100000000000101000000000111;
constexpr uint32_t VLUXSEG5EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG5EI32_V_ENCODING = 0b10000100000000000110000000000111;
constexpr uint32_t VLUXSEG5EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG5EI64_V_ENCODING = 0b10000100000000000111000000000111;
constexpr uint32_t VLUXSEG5EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG5EI8_V_ENCODING = 0b10001100000000000000000000000111;
constexpr uint32_t VLOXSEG5EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG5EI16_V_ENCODING = 0b10001100000000000101000000000111;
constexpr uint32_t VLOXSEG5EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG5EI32_V_ENCODING = 0b10001100000000000110000000000111;
constexpr uint32_t VLOXSEG5EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG5EI64_V_ENCODING = 0b10001100000000000111000000000111;
constexpr uint32_t VLOXSEG5EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG5EI8_V_ENCODING = 0b10000100000000000000000000100111;
constexpr uint32_t VSUXSEG5EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG5EI16_V_ENCODING = 0b10000100000000000101000000100111;
constexpr uint32_t VSUXSEG5EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG5EI32_V_ENCODING = 0b10000100000000000110000000100111;
constexpr uint32_t VSUXSEG5EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG5EI64_V_ENCODING = 0b10000100000000000111000000100111;
constexpr uint32_t VSUXSEG5EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG5EI8_V_ENCODING = 0b10001100000000000000000000100111;
constexpr uint32_t VSOXSEG5EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG5EI16_V_ENCODING = 0b10001100000000000101000000100111;
constexpr uint32_t VSOXSEG5EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG5EI32_V_ENCODING = 0b10001100000000000110000000100111;
constexpr uint32_t VSOXSEG5EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG5EI64_V_ENCODING = 0b10001100000000000111000000100111;
constexpr uint32_t VSOXSEG5EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG5E8FF_V_ENCODING = 0b10000001000000000000000000000111;
constexpr uint32_t VLSEG5E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E16FF_V_ENCODING = 0b10000001000000000101000000000111;
constexpr uint32_t VLSEG5E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E32FF_V_ENCODING = 0b10000001000000000110000000000111;
constexpr uint32_t VLSEG5E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG5E64FF_V_ENCODING = 0b10000001000000000111000000000111;
constexpr uint32_t VLSEG5E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E8_V_ENCODING = 0b10100000000000000000000000000111;
constexpr uint32_t VLSEG6E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E16_V_ENCODING = 0b10100000000000000101000000000111;
constexpr uint32_t VLSEG6E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E32_V_ENCODING = 0b10100000000000000110000000000111;
constexpr uint32_t VLSEG6E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E64_V_ENCODING = 0b10100000000000000111000000000111;
constexpr uint32_t VLSEG6E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG6E8_V_ENCODING = 0b10100000000000000000000000100111;
constexpr uint32_t VSSEG6E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG6E16_V_ENCODING = 0b10100000000000000101000000100111;
constexpr uint32_t VSSEG6E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG6E32_V_ENCODING = 0b10100000000000000110000000100111;
constexpr uint32_t VSSEG6E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG6E64_V_ENCODING = 0b10100000000000000111000000100111;
constexpr uint32_t VSSEG6E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG6E8_V_ENCODING = 0b10101000000000000000000000000111;
constexpr uint32_t VLSSEG6E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG6E16_V_ENCODING = 0b10101000000000000101000000000111;
constexpr uint32_t VLSSEG6E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG6E32_V_ENCODING = 0b10101000000000000110000000000111;
constexpr uint32_t VLSSEG6E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG6E64_V_ENCODING = 0b10101000000000000111000000000111;
constexpr uint32_t VLSSEG6E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG6E8_V_ENCODING = 0b10101000000000000000000000100111;
constexpr uint32_t VSSSEG6E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG6E16_V_ENCODING = 0b10101000000000000101000000100111;
constexpr uint32_t VSSSEG6E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG6E32_V_ENCODING = 0b10101000000000000110000000100111;
constexpr uint32_t VSSSEG6E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG6E64_V_ENCODING = 0b10101000000000000111000000100111;
constexpr uint32_t VSSSEG6E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG6EI8_V_ENCODING = 0b10100100000000000000000000000111;
constexpr uint32_t VLUXSEG6EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG6EI16_V_ENCODING = 0b10100100000000000101000000000111;
constexpr uint32_t VLUXSEG6EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG6EI32_V_ENCODING = 0b10100100000000000110000000000111;
constexpr uint32_t VLUXSEG6EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG6EI64_V_ENCODING = 0b10100100000000000111000000000111;
constexpr uint32_t VLUXSEG6EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG6EI8_V_ENCODING = 0b10101100000000000000000000000111;
constexpr uint32_t VLOXSEG6EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG6EI16_V_ENCODING = 0b10101100000000000101000000000111;
constexpr uint32_t VLOXSEG6EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG6EI32_V_ENCODING = 0b10101100000000000110000000000111;
constexpr uint32_t VLOXSEG6EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG6EI64_V_ENCODING = 0b10101100000000000111000000000111;
constexpr uint32_t VLOXSEG6EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG6EI8_V_ENCODING = 0b10100100000000000000000000100111;
constexpr uint32_t VSUXSEG6EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG6EI16_V_ENCODING = 0b10100100000000000101000000100111;
constexpr uint32_t VSUXSEG6EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG6EI32_V_ENCODING = 0b10100100000000000110000000100111;
constexpr uint32_t VSUXSEG6EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG6EI64_V_ENCODING = 0b10100100000000000111000000100111;
constexpr uint32_t VSUXSEG6EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG6EI8_V_ENCODING = 0b10101100000000000000000000100111;
constexpr uint32_t VSOXSEG6EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG6EI16_V_ENCODING = 0b10101100000000000101000000100111;
constexpr uint32_t VSOXSEG6EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG6EI32_V_ENCODING = 0b10101100000000000110000000100111;
constexpr uint32_t VSOXSEG6EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG6EI64_V_ENCODING = 0b10101100000000000111000000100111;
constexpr uint32_t VSOXSEG6EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG6E8FF_V_ENCODING = 0b10100001000000000000000000000111;
constexpr uint32_t VLSEG6E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E16FF_V_ENCODING = 0b10100001000000000101000000000111;
constexpr uint32_t VLSEG6E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E32FF_V_ENCODING = 0b10100001000000000110000000000111;
constexpr uint32_t VLSEG6E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG6E64FF_V_ENCODING = 0b10100001000000000111000000000111;
constexpr uint32_t VLSEG6E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E8_V_ENCODING = 0b11000000000000000000000000000111;
constexpr uint32_t VLSEG7E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E16_V_ENCODING = 0b11000000000000000101000000000111;
constexpr uint32_t VLSEG7E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E32_V_ENCODING = 0b11000000000000000110000000000111;
constexpr uint32_t VLSEG7E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E64_V_ENCODING = 0b11000000000000000111000000000111;
constexpr uint32_t VLSEG7E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG7E8_V_ENCODING = 0b11000000000000000000000000100111;
constexpr uint32_t VSSEG7E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG7E16_V_ENCODING = 0b11000000000000000101000000100111;
constexpr uint32_t VSSEG7E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG7E32_V_ENCODING = 0b11000000000000000110000000100111;
constexpr uint32_t VSSEG7E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG7E64_V_ENCODING = 0b11000000000000000111000000100111;
constexpr uint32_t VSSEG7E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG7E8_V_ENCODING = 0b11001000000000000000000000000111;
constexpr uint32_t VLSSEG7E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG7E16_V_ENCODING = 0b11001000000000000101000000000111;
constexpr uint32_t VLSSEG7E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG7E32_V_ENCODING = 0b11001000000000000110000000000111;
constexpr uint32_t VLSSEG7E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG7E64_V_ENCODING = 0b11001000000000000111000000000111;
constexpr uint32_t VLSSEG7E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG7E8_V_ENCODING = 0b11001000000000000000000000100111;
constexpr uint32_t VSSSEG7E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG7E16_V_ENCODING = 0b11001000000000000101000000100111;
constexpr uint32_t VSSSEG7E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG7E32_V_ENCODING = 0b11001000000000000110000000100111;
constexpr uint32_t VSSSEG7E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG7E64_V_ENCODING = 0b11001000000000000111000000100111;
constexpr uint32_t VSSSEG7E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG7EI8_V_ENCODING = 0b11000100000000000000000000000111;
constexpr uint32_t VLUXSEG7EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG7EI16_V_ENCODING = 0b11000100000000000101000000000111;
constexpr uint32_t VLUXSEG7EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG7EI32_V_ENCODING = 0b11000100000000000110000000000111;
constexpr uint32_t VLUXSEG7EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG7EI64_V_ENCODING = 0b11000100000000000111000000000111;
constexpr uint32_t VLUXSEG7EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG7EI8_V_ENCODING = 0b11001100000000000000000000000111;
constexpr uint32_t VLOXSEG7EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG7EI16_V_ENCODING = 0b11001100000000000101000000000111;
constexpr uint32_t VLOXSEG7EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG7EI32_V_ENCODING = 0b11001100000000000110000000000111;
constexpr uint32_t VLOXSEG7EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG7EI64_V_ENCODING = 0b11001100000000000111000000000111;
constexpr uint32_t VLOXSEG7EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG7EI8_V_ENCODING = 0b11000100000000000000000000100111;
constexpr uint32_t VSUXSEG7EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG7EI16_V_ENCODING = 0b11000100000000000101000000100111;
constexpr uint32_t VSUXSEG7EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG7EI32_V_ENCODING = 0b11000100000000000110000000100111;
constexpr uint32_t VSUXSEG7EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG7EI64_V_ENCODING = 0b11000100000000000111000000100111;
constexpr uint32_t VSUXSEG7EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG7EI8_V_ENCODING = 0b11001100000000000000000000100111;
constexpr uint32_t VSOXSEG7EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG7EI16_V_ENCODING = 0b11001100000000000101000000100111;
constexpr uint32_t VSOXSEG7EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG7EI32_V_ENCODING = 0b11001100000000000110000000100111;
constexpr uint32_t VSOXSEG7EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG7EI64_V_ENCODING = 0b11001100000000000111000000100111;
constexpr uint32_t VSOXSEG7EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG7E8FF_V_ENCODING = 0b11000001000000000000000000000111;
constexpr uint32_t VLSEG7E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E16FF_V_ENCODING = 0b11000001000000000101000000000111;
constexpr uint32_t VLSEG7E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E32FF_V_ENCODING = 0b11000001000000000110000000000111;
constexpr uint32_t VLSEG7E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG7E64FF_V_ENCODING = 0b11000001000000000111000000000111;
constexpr uint32_t VLSEG7E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E8_V_ENCODING = 0b11100000000000000000000000000111;
constexpr uint32_t VLSEG8E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E16_V_ENCODING = 0b11100000000000000101000000000111;
constexpr uint32_t VLSEG8E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E32_V_ENCODING = 0b11100000000000000110000000000111;
constexpr uint32_t VLSEG8E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E64_V_ENCODING = 0b11100000000000000111000000000111;
constexpr uint32_t VLSEG8E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG8E8_V_ENCODING = 0b11100000000000000000000000100111;
constexpr uint32_t VSSEG8E8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG8E16_V_ENCODING = 0b11100000000000000101000000100111;
constexpr uint32_t VSSEG8E16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG8E32_V_ENCODING = 0b11100000000000000110000000100111;
constexpr uint32_t VSSEG8E32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSSEG8E64_V_ENCODING = 0b11100000000000000111000000100111;
constexpr uint32_t VSSEG8E64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSSEG8E8_V_ENCODING = 0b11101000000000000000000000000111;
constexpr uint32_t VLSSEG8E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG8E16_V_ENCODING = 0b11101000000000000101000000000111;
constexpr uint32_t VLSSEG8E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG8E32_V_ENCODING = 0b11101000000000000110000000000111;
constexpr uint32_t VLSSEG8E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSSEG8E64_V_ENCODING = 0b11101000000000000111000000000111;
constexpr uint32_t VLSSEG8E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG8E8_V_ENCODING = 0b11101000000000000000000000100111;
constexpr uint32_t VSSSEG8E8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG8E16_V_ENCODING = 0b11101000000000000101000000100111;
constexpr uint32_t VSSSEG8E16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG8E32_V_ENCODING = 0b11101000000000000110000000100111;
constexpr uint32_t VSSSEG8E32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSSEG8E64_V_ENCODING = 0b11101000000000000111000000100111;
constexpr uint32_t VSSSEG8E64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG8EI8_V_ENCODING = 0b11100100000000000000000000000111;
constexpr uint32_t VLUXSEG8EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG8EI16_V_ENCODING = 0b11100100000000000101000000000111;
constexpr uint32_t VLUXSEG8EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG8EI32_V_ENCODING = 0b11100100000000000110000000000111;
constexpr uint32_t VLUXSEG8EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLUXSEG8EI64_V_ENCODING = 0b11100100000000000111000000000111;
constexpr uint32_t VLUXSEG8EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG8EI8_V_ENCODING = 0b11101100000000000000000000000111;
constexpr uint32_t VLOXSEG8EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG8EI16_V_ENCODING = 0b11101100000000000101000000000111;
constexpr uint32_t VLOXSEG8EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG8EI32_V_ENCODING = 0b11101100000000000110000000000111;
constexpr uint32_t VLOXSEG8EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLOXSEG8EI64_V_ENCODING = 0b11101100000000000111000000000111;
constexpr uint32_t VLOXSEG8EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG8EI8_V_ENCODING = 0b11100100000000000000000000100111;
constexpr uint32_t VSUXSEG8EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG8EI16_V_ENCODING = 0b11100100000000000101000000100111;
constexpr uint32_t VSUXSEG8EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG8EI32_V_ENCODING = 0b11100100000000000110000000100111;
constexpr uint32_t VSUXSEG8EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUXSEG8EI64_V_ENCODING = 0b11100100000000000111000000100111;
constexpr uint32_t VSUXSEG8EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG8EI8_V_ENCODING = 0b11101100000000000000000000100111;
constexpr uint32_t VSOXSEG8EI8_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG8EI16_V_ENCODING = 0b11101100000000000101000000100111;
constexpr uint32_t VSOXSEG8EI16_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG8EI32_V_ENCODING = 0b11101100000000000110000000100111;
constexpr uint32_t VSOXSEG8EI32_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSOXSEG8EI64_V_ENCODING = 0b11101100000000000111000000100111;
constexpr uint32_t VSOXSEG8EI64_V_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VLSEG8E8FF_V_ENCODING = 0b11100001000000000000000000000111;
constexpr uint32_t VLSEG8E8FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E16FF_V_ENCODING = 0b11100001000000000101000000000111;
constexpr uint32_t VLSEG8E16FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E32FF_V_ENCODING = 0b11100001000000000110000000000111;
constexpr uint32_t VLSEG8E32FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VLSEG8E64FF_V_ENCODING = 0b11100001000000000111000000000111;
constexpr uint32_t VLSEG8E64FF_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL1RE8_V_ENCODING = 0b100000000000000000000111;
constexpr uint32_t VL1RE8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL1RE16_V_ENCODING = 0b100000000101000000000111;
constexpr uint32_t VL1RE16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL1RE32_V_ENCODING = 0b100000000110000000000111;
constexpr uint32_t VL1RE32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL1RE64_V_ENCODING = 0b100000000111000000000111;
constexpr uint32_t VL1RE64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VS1R_V_ENCODING = 0b100000000000000000100111;
constexpr uint32_t VS1R_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL2RE8_V_ENCODING = 0b100000100000000000000000000111;
constexpr uint32_t VL2RE8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL2RE16_V_ENCODING = 0b100000100000000101000000000111;
constexpr uint32_t VL2RE16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL2RE32_V_ENCODING = 0b100000100000000110000000000111;
constexpr uint32_t VL2RE32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL2RE64_V_ENCODING = 0b100000100000000111000000000111;
constexpr uint32_t VL2RE64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VS2R_V_ENCODING = 0b100000100000000000000000100111;
constexpr uint32_t VS2R_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL4RE8_V_ENCODING = 0b1100000100000000000000000000111;
constexpr uint32_t VL4RE8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL4RE16_V_ENCODING = 0b1100000100000000101000000000111;
constexpr uint32_t VL4RE16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL4RE32_V_ENCODING = 0b1100000100000000110000000000111;
constexpr uint32_t VL4RE32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL4RE64_V_ENCODING = 0b1100000100000000111000000000111;
constexpr uint32_t VL4RE64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VS4R_V_ENCODING = 0b1100000100000000000000000100111;
constexpr uint32_t VS4R_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL8RE8_V_ENCODING = 0b11100000100000000000000000000111;
constexpr uint32_t VL8RE8_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL8RE16_V_ENCODING = 0b11100000100000000101000000000111;
constexpr uint32_t VL8RE16_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL8RE32_V_ENCODING = 0b11100000100000000110000000000111;
constexpr uint32_t VL8RE32_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VL8RE64_V_ENCODING = 0b11100000100000000111000000000111;
constexpr uint32_t VL8RE64_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VS8R_V_ENCODING = 0b11100000100000000000000000100111;
constexpr uint32_t VS8R_V_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VADD_VV_ENCODING = 0b1010111;
constexpr uint32_t VADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VADD_VI_ENCODING = 0b11000001010111;
constexpr uint32_t VADD_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VADD_VX_ENCODING = 0b100000001010111;
constexpr uint32_t VADD_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUB_VV_ENCODING = 0b1000000000000000000001010111;
constexpr uint32_t VSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSUB_VX_ENCODING = 0b1000000000000100000001010111;
constexpr uint32_t VSUB_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VRSUB_VX_ENCODING = 0b1100000000000100000001010111;
constexpr uint32_t VRSUB_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VRSUB_VI_ENCODING = 0b1100000000000011000001010111;
constexpr uint32_t VRSUB_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADD_VV_ENCODING = 0b11000100000000000010000001010111;
constexpr uint32_t VWADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADD_VX_ENCODING = 0b11000100000000000110000001010111;
constexpr uint32_t VWADD_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUB_VV_ENCODING = 0b11001100000000000010000001010111;
constexpr uint32_t VWSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUB_VX_ENCODING = 0b11001100000000000110000001010111;
constexpr uint32_t VWSUB_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADDU_VV_ENCODING = 0b11000000000000000010000001010111;
constexpr uint32_t VWADDU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADDU_VX_ENCODING = 0b11000000000000000110000001010111;
constexpr uint32_t VWADDU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUBU_VV_ENCODING = 0b11001000000000000010000001010111;
constexpr uint32_t VWSUBU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUBU_VX_ENCODING = 0b11001000000000000110000001010111;
constexpr uint32_t VWSUBU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADD_WV_ENCODING = 0b11010100000000000010000001010111;
constexpr uint32_t VWADD_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADD_WX_ENCODING = 0b11010100000000000110000001010111;
constexpr uint32_t VWADD_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUB_WV_ENCODING = 0b11011100000000000010000001010111;
constexpr uint32_t VWSUB_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUB_WX_ENCODING = 0b11011100000000000110000001010111;
constexpr uint32_t VWSUB_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADDU_WV_ENCODING = 0b11010000000000000010000001010111;
constexpr uint32_t VWADDU_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWADDU_WX_ENCODING = 0b11010000000000000110000001010111;
constexpr uint32_t VWADDU_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUBU_WV_ENCODING = 0b11011000000000000010000001010111;
constexpr uint32_t VWSUBU_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWSUBU_WX_ENCODING = 0b11011000000000000110000001010111;
constexpr uint32_t VWSUBU_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VZEXT_VF2_ENCODING = 0b1001000000000110010000001010111;
constexpr uint32_t VZEXT_VF2_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VSEXT_VF2_ENCODING = 0b1001000000000111010000001010111;
constexpr uint32_t VSEXT_VF2_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VZEXT_VF4_ENCODING = 0b1001000000000100010000001010111;
constexpr uint32_t VZEXT_VF4_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VSEXT_VF4_ENCODING = 0b1001000000000101010000001010111;
constexpr uint32_t VSEXT_VF4_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VZEXT_VF8_ENCODING = 0b1001000000000010010000001010111;
constexpr uint32_t VZEXT_VF8_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VSEXT_VF8_ENCODING = 0b1001000000000011010000001010111;
constexpr uint32_t VSEXT_VF8_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VADC_VVM_ENCODING = 0b1000000000000000000000001010111;
constexpr uint32_t VADC_VVM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VADC_VXM_ENCODING = 0b1000000000000000100000001010111;
constexpr uint32_t VADC_VXM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VADC_VIM_ENCODING = 0b1000000000000000011000001010111;
constexpr uint32_t VADC_VIM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMADC_VVM_ENCODING = 0b1000100000000000000000001010111;
constexpr uint32_t VMADC_VVM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMADC_VXM_ENCODING = 0b1000100000000000100000001010111;
constexpr uint32_t VMADC_VXM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMADC_VIM_ENCODING = 0b1000100000000000011000001010111;
constexpr uint32_t VMADC_VIM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMADC_VV_ENCODING = 0b1000110000000000000000001010111;
constexpr uint32_t VMADC_VV_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMADC_VX_ENCODING = 0b1000110000000000100000001010111;
constexpr uint32_t VMADC_VX_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMADC_VI_ENCODING = 0b1000110000000000011000001010111;
constexpr uint32_t VMADC_VI_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VSBC_VVM_ENCODING = 0b1001000000000000000000001010111;
constexpr uint32_t VSBC_VVM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VSBC_VXM_ENCODING = 0b1001000000000000100000001010111;
constexpr uint32_t VSBC_VXM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMSBC_VVM_ENCODING = 0b1001100000000000000000001010111;
constexpr uint32_t VMSBC_VVM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMSBC_VXM_ENCODING = 0b1001100000000000100000001010111;
constexpr uint32_t VMSBC_VXM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMSBC_VV_ENCODING = 0b1001110000000000000000001010111;
constexpr uint32_t VMSBC_VV_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMSBC_VX_ENCODING = 0b1001110000000000100000001010111;
constexpr uint32_t VMSBC_VX_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VAND_VI_ENCODING = 0b100100000000000011000001010111;
constexpr uint32_t VAND_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VAND_VV_ENCODING = 0b100100000000000000000001010111;
constexpr uint32_t VAND_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VAND_VX_ENCODING = 0b100100000000000100000001010111;
constexpr uint32_t VAND_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VOR_VV_ENCODING = 0b101000000000000000000001010111;
constexpr uint32_t VOR_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VOR_VI_ENCODING = 0b101000000000000011000001010111;
constexpr uint32_t VOR_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VOR_VX_ENCODING = 0b101000000000000100000001010111;
constexpr uint32_t VOR_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VXOR_VV_ENCODING = 0b101100000000000000000001010111;
constexpr uint32_t VXOR_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VXOR_VI_ENCODING = 0b101100000000000011000001010111;
constexpr uint32_t VXOR_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VXOR_VX_ENCODING = 0b101100000000000100000001010111;
constexpr uint32_t VXOR_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLL_VI_ENCODING = 0b10010100000000000011000001010111;
constexpr uint32_t VSLL_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLL_VV_ENCODING = 0b10010100000000000000000001010111;
constexpr uint32_t VSLL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLL_VX_ENCODING = 0b10010100000000000100000001010111;
constexpr uint32_t VSLL_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSRL_VV_ENCODING = 0b10100000000000000000000001010111;
constexpr uint32_t VSRL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSRL_VI_ENCODING = 0b10100000000000000011000001010111;
constexpr uint32_t VSRL_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSRL_VX_ENCODING = 0b10100000000000000100000001010111;
constexpr uint32_t VSRL_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSRA_VV_ENCODING = 0b10100100000000000000000001010111;
constexpr uint32_t VSRA_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSRA_VI_ENCODING = 0b10100100000000000011000001010111;
constexpr uint32_t VSRA_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSRA_VX_ENCODING = 0b10100100000000000100000001010111;
constexpr uint32_t VSRA_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNSRL_WV_ENCODING = 0b10110000000000000000000001010111;
constexpr uint32_t VNSRL_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNSRL_WI_ENCODING = 0b10110000000000000011000001010111;
constexpr uint32_t VNSRL_WI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNSRL_WX_ENCODING = 0b10110000000000000100000001010111;
constexpr uint32_t VNSRL_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNSRA_WV_ENCODING = 0b10110100000000000000000001010111;
constexpr uint32_t VNSRA_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNSRA_WI_ENCODING = 0b10110100000000000011000001010111;
constexpr uint32_t VNSRA_WI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNSRA_WX_ENCODING = 0b10110100000000000100000001010111;
constexpr uint32_t VNSRA_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSEQ_VV_ENCODING = 0b1100000000000000000000001010111;
constexpr uint32_t VMSEQ_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSEQ_VX_ENCODING = 0b1100000000000000100000001010111;
constexpr uint32_t VMSEQ_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSEQ_VI_ENCODING = 0b1100000000000000011000001010111;
constexpr uint32_t VMSEQ_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSNE_VV_ENCODING = 0b1100100000000000000000001010111;
constexpr uint32_t VMSNE_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSNE_VX_ENCODING = 0b1100100000000000100000001010111;
constexpr uint32_t VMSNE_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSNE_VI_ENCODING = 0b1100100000000000011000001010111;
constexpr uint32_t VMSNE_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLTU_VV_ENCODING = 0b1101000000000000000000001010111;
constexpr uint32_t VMSLTU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLTU_VX_ENCODING = 0b1101000000000000100000001010111;
constexpr uint32_t VMSLTU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLT_VV_ENCODING = 0b1101100000000000000000001010111;
constexpr uint32_t VMSLT_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLT_VX_ENCODING = 0b1101100000000000100000001010111;
constexpr uint32_t VMSLT_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLEU_VV_ENCODING = 0b1110000000000000000000001010111;
constexpr uint32_t VMSLEU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLEU_VX_ENCODING = 0b1110000000000000100000001010111;
constexpr uint32_t VMSLEU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLEU_VI_ENCODING = 0b1110000000000000011000001010111;
constexpr uint32_t VMSLEU_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLE_VV_ENCODING = 0b1110100000000000000000001010111;
constexpr uint32_t VMSLE_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLE_VX_ENCODING = 0b1110100000000000100000001010111;
constexpr uint32_t VMSLE_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSLE_VI_ENCODING = 0b1110100000000000011000001010111;
constexpr uint32_t VMSLE_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSGTU_VX_ENCODING = 0b1111000000000000100000001010111;
constexpr uint32_t VMSGTU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSGTU_VI_ENCODING = 0b1111000000000000011000001010111;
constexpr uint32_t VMSGTU_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSGT_VX_ENCODING = 0b1111100000000000100000001010111;
constexpr uint32_t VMSGT_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMSGT_VI_ENCODING = 0b1111100000000000011000001010111;
constexpr uint32_t VMSGT_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMINU_VV_ENCODING = 0b10000000000000000000001010111;
constexpr uint32_t VMINU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMINU_VX_ENCODING = 0b10000000000000100000001010111;
constexpr uint32_t VMINU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMIN_VV_ENCODING = 0b10100000000000000000001010111;
constexpr uint32_t VMIN_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMIN_VX_ENCODING = 0b10100000000000100000001010111;
constexpr uint32_t VMIN_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMAXU_VV_ENCODING = 0b11000000000000000000001010111;
constexpr uint32_t VMAXU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMAXU_VX_ENCODING = 0b11000000000000100000001010111;
constexpr uint32_t VMAXU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMAX_VV_ENCODING = 0b11100000000000000000001010111;
constexpr uint32_t VMAX_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMAX_VX_ENCODING = 0b11100000000000100000001010111;
constexpr uint32_t VMAX_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMUL_VV_ENCODING = 0b10010100000000000010000001010111;
constexpr uint32_t VMUL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMUL_VX_ENCODING = 0b10010100000000000110000001010111;
constexpr uint32_t VMUL_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMULH_VV_ENCODING = 0b10011100000000000010000001010111;
constexpr uint32_t VMULH_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMULH_VX_ENCODING = 0b10011100000000000110000001010111;
constexpr uint32_t VMULH_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMULHU_VV_ENCODING = 0b10010000000000000010000001010111;
constexpr uint32_t VMULHU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMULHU_VX_ENCODING = 0b10010000000000000110000001010111;
constexpr uint32_t VMULHU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMULHSU_VV_ENCODING = 0b10011000000000000010000001010111;
constexpr uint32_t VMULHSU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMULHSU_VX_ENCODING = 0b10011000000000000110000001010111;
constexpr uint32_t VMULHSU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VDIVU_VV_ENCODING = 0b10000000000000000010000001010111;
constexpr uint32_t VDIVU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VDIVU_VX_ENCODING = 0b10000000000000000110000001010111;
constexpr uint32_t VDIVU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VDIV_VV_ENCODING = 0b10000100000000000010000001010111;
constexpr uint32_t VDIV_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VDIV_VX_ENCODING = 0b10000100000000000110000001010111;
constexpr uint32_t VDIV_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREMU_VV_ENCODING = 0b10001000000000000010000001010111;
constexpr uint32_t VREMU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREMU_VX_ENCODING = 0b10001000000000000110000001010111;
constexpr uint32_t VREMU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREM_VV_ENCODING = 0b10001100000000000010000001010111;
constexpr uint32_t VREM_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREM_VX_ENCODING = 0b10001100000000000110000001010111;
constexpr uint32_t VREM_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMUL_VV_ENCODING = 0b11101100000000000010000001010111;
constexpr uint32_t VWMUL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMUL_VX_ENCODING = 0b11101100000000000110000001010111;
constexpr uint32_t VWMUL_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMULU_VV_ENCODING = 0b11100000000000000010000001010111;
constexpr uint32_t VWMULU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMULU_VX_ENCODING = 0b11100000000000000110000001010111;
constexpr uint32_t VWMULU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMULSU_VV_ENCODING = 0b11101000000000000010000001010111;
constexpr uint32_t VWMULSU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMULSU_VX_ENCODING = 0b11101000000000000110000001010111;
constexpr uint32_t VWMULSU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMACC_VV_ENCODING = 0b10110100000000000010000001010111;
constexpr uint32_t VMACC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMACC_VX_ENCODING = 0b10110100000000000110000001010111;
constexpr uint32_t VMACC_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNMSAC_VV_ENCODING = 0b10111100000000000010000001010111;
constexpr uint32_t VNMSAC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNMSAC_VX_ENCODING = 0b10111100000000000110000001010111;
constexpr uint32_t VNMSAC_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMADD_VV_ENCODING = 0b10100100000000000010000001010111;
constexpr uint32_t VMADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMADD_VX_ENCODING = 0b10100100000000000110000001010111;
constexpr uint32_t VMADD_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNMSUB_VV_ENCODING = 0b10101100000000000010000001010111;
constexpr uint32_t VNMSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNMSUB_VX_ENCODING = 0b10101100000000000110000001010111;
constexpr uint32_t VNMSUB_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACCU_VV_ENCODING = 0b11110000000000000010000001010111;
constexpr uint32_t VWMACCU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACCU_VX_ENCODING = 0b11110000000000000110000001010111;
constexpr uint32_t VWMACCU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACC_VV_ENCODING = 0b11110100000000000010000001010111;
constexpr uint32_t VWMACC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACC_VX_ENCODING = 0b11110100000000000110000001010111;
constexpr uint32_t VWMACC_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACCSU_VV_ENCODING = 0b11111100000000000010000001010111;
constexpr uint32_t VWMACCSU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACCSU_VX_ENCODING = 0b11111100000000000110000001010111;
constexpr uint32_t VWMACCSU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWMACCUS_VX_ENCODING = 0b11111000000000000110000001010111;
constexpr uint32_t VWMACCUS_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMERGE_VVM_ENCODING = 0b1011100000000000000000001010111;
constexpr uint32_t VMERGE_VVM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMERGE_VXM_ENCODING = 0b1011100000000000100000001010111;
constexpr uint32_t VMERGE_VXM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMERGE_VIM_ENCODING = 0b1011100000000000011000001010111;
constexpr uint32_t VMERGE_VIM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMV_V_V_ENCODING = 0b1011110000000000000000001010111;
constexpr uint32_t VMV_V_V_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMV_V_X_ENCODING = 0b1011110000000000100000001010111;
constexpr uint32_t VMV_V_X_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VMV_V_I_ENCODING = 0b1011110000000000011000001010111;
constexpr uint32_t VMV_V_I_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VSADDU_VV_ENCODING = 0b10000000000000000000000001010111;
constexpr uint32_t VSADDU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSADDU_VX_ENCODING = 0b10000000000000000100000001010111;
constexpr uint32_t VSADDU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSADDU_VI_ENCODING = 0b10000000000000000011000001010111;
constexpr uint32_t VSADDU_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSADD_VV_ENCODING = 0b10000100000000000000000001010111;
constexpr uint32_t VSADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSADD_VX_ENCODING = 0b10000100000000000100000001010111;
constexpr uint32_t VSADD_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSADD_VI_ENCODING = 0b10000100000000000011000001010111;
constexpr uint32_t VSADD_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSUBU_VV_ENCODING = 0b10001000000000000000000001010111;
constexpr uint32_t VSSUBU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSUBU_VX_ENCODING = 0b10001000000000000100000001010111;
constexpr uint32_t VSSUBU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSUB_VV_ENCODING = 0b10001100000000000000000001010111;
constexpr uint32_t VSSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSUB_VX_ENCODING = 0b10001100000000000100000001010111;
constexpr uint32_t VSSUB_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VAADDU_VV_ENCODING = 0b100000000000000010000001010111;
constexpr uint32_t VAADDU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VAADDU_VX_ENCODING = 0b100000000000000110000001010111;
constexpr uint32_t VAADDU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VAADD_VV_ENCODING = 0b100100000000000010000001010111;
constexpr uint32_t VAADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VAADD_VX_ENCODING = 0b100100000000000110000001010111;
constexpr uint32_t VAADD_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VASUBU_VV_ENCODING = 0b101000000000000010000001010111;
constexpr uint32_t VASUBU_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VASUBU_VX_ENCODING = 0b101000000000000110000001010111;
constexpr uint32_t VASUBU_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VASUB_VV_ENCODING = 0b101100000000000010000001010111;
constexpr uint32_t VASUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VASUB_VX_ENCODING = 0b101100000000000110000001010111;
constexpr uint32_t VASUB_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSMUL_VV_ENCODING = 0b10011100000000000000000001010111;
constexpr uint32_t VSMUL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSMUL_VX_ENCODING = 0b10011100000000000100000001010111;
constexpr uint32_t VSMUL_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSRL_VV_ENCODING = 0b10101000000000000000000001010111;
constexpr uint32_t VSSRL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSRL_VX_ENCODING = 0b10101000000000000100000001010111;
constexpr uint32_t VSSRL_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSRL_VI_ENCODING = 0b10101000000000000011000001010111;
constexpr uint32_t VSSRL_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSRA_VV_ENCODING = 0b10101100000000000000000001010111;
constexpr uint32_t VSSRA_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSRA_VX_ENCODING = 0b10101100000000000100000001010111;
constexpr uint32_t VSSRA_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSSRA_VI_ENCODING = 0b10101100000000000011000001010111;
constexpr uint32_t VSSRA_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNCLIPU_WV_ENCODING = 0b10111000000000000000000001010111;
constexpr uint32_t VNCLIPU_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNCLIPU_WX_ENCODING = 0b10111000000000000100000001010111;
constexpr uint32_t VNCLIPU_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNCLIPU_WI_ENCODING = 0b10111000000000000011000001010111;
constexpr uint32_t VNCLIPU_WI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNCLIP_WV_ENCODING = 0b10111100000000000000000001010111;
constexpr uint32_t VNCLIP_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNCLIP_WX_ENCODING = 0b10111100000000000100000001010111;
constexpr uint32_t VNCLIP_WX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VNCLIP_WI_ENCODING = 0b10111100000000000011000001010111;
constexpr uint32_t VNCLIP_WI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFADD_VV_ENCODING = 0b1000001010111;
constexpr uint32_t VFADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFADD_VF_ENCODING = 0b101000001010111;
constexpr uint32_t VFADD_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSUB_VV_ENCODING = 0b1000000000000001000001010111;
constexpr uint32_t VFSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSUB_VF_ENCODING = 0b1000000000000101000001010111;
constexpr uint32_t VFSUB_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFRSUB_VF_ENCODING = 0b10011100000000000101000001010111;
constexpr uint32_t VFRSUB_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWADD_VV_ENCODING = 0b11000000000000000001000001010111;
constexpr uint32_t VFWADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWADD_VF_ENCODING = 0b11000000000000000101000001010111;
constexpr uint32_t VFWADD_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWSUB_VV_ENCODING = 0b11001000000000000001000001010111;
constexpr uint32_t VFWSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWSUB_VF_ENCODING = 0b11001000000000000101000001010111;
constexpr uint32_t VFWSUB_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWADD_WV_ENCODING = 0b11010000000000000001000001010111;
constexpr uint32_t VFWADD_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWADD_WF_ENCODING = 0b11010000000000000101000001010111;
constexpr uint32_t VFWADD_WF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWSUB_WV_ENCODING = 0b11011000000000000001000001010111;
constexpr uint32_t VFWSUB_WV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWSUB_WF_ENCODING = 0b11011000000000000101000001010111;
constexpr uint32_t VFWSUB_WF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMUL_VV_ENCODING = 0b10010000000000000001000001010111;
constexpr uint32_t VFMUL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMUL_VF_ENCODING = 0b10010000000000000101000001010111;
constexpr uint32_t VFMUL_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFDIV_VV_ENCODING = 0b10000000000000000001000001010111;
constexpr uint32_t VFDIV_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFDIV_VF_ENCODING = 0b10000000000000000101000001010111;
constexpr uint32_t VFDIV_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFRDIV_VF_ENCODING = 0b10000100000000000101000001010111;
constexpr uint32_t VFRDIV_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWMUL_VV_ENCODING = 0b11100000000000000001000001010111;
constexpr uint32_t VFWMUL_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWMUL_VF_ENCODING = 0b11100000000000000101000001010111;
constexpr uint32_t VFWMUL_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMACC_VV_ENCODING = 0b10110000000000000001000001010111;
constexpr uint32_t VFMACC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMACC_VF_ENCODING = 0b10110000000000000101000001010111;
constexpr uint32_t VFMACC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMACC_VV_ENCODING = 0b10110100000000000001000001010111;
constexpr uint32_t VFNMACC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMACC_VF_ENCODING = 0b10110100000000000101000001010111;
constexpr uint32_t VFNMACC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMSAC_VV_ENCODING = 0b10111000000000000001000001010111;
constexpr uint32_t VFMSAC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMSAC_VF_ENCODING = 0b10111000000000000101000001010111;
constexpr uint32_t VFMSAC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMSAC_VV_ENCODING = 0b10111100000000000001000001010111;
constexpr uint32_t VFNMSAC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMSAC_VF_ENCODING = 0b10111100000000000101000001010111;
constexpr uint32_t VFNMSAC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMADD_VV_ENCODING = 0b10100000000000000001000001010111;
constexpr uint32_t VFMADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMADD_VF_ENCODING = 0b10100000000000000101000001010111;
constexpr uint32_t VFMADD_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMADD_VV_ENCODING = 0b10100100000000000001000001010111;
constexpr uint32_t VFNMADD_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMADD_VF_ENCODING = 0b10100100000000000101000001010111;
constexpr uint32_t VFNMADD_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMSUB_VV_ENCODING = 0b10101000000000000001000001010111;
constexpr uint32_t VFMSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMSUB_VF_ENCODING = 0b10101000000000000101000001010111;
constexpr uint32_t VFMSUB_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMSUB_VV_ENCODING = 0b10101100000000000001000001010111;
constexpr uint32_t VFNMSUB_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFNMSUB_VF_ENCODING = 0b10101100000000000101000001010111;
constexpr uint32_t VFNMSUB_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWMACC_VV_ENCODING = 0b11110000000000000001000001010111;
constexpr uint32_t VFWMACC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWMACC_VF_ENCODING = 0b11110000000000000101000001010111;
constexpr uint32_t VFWMACC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWNMACC_VV_ENCODING = 0b11110100000000000001000001010111;
constexpr uint32_t VFWNMACC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWNMACC_VF_ENCODING = 0b11110100000000000101000001010111;
constexpr uint32_t VFWNMACC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWMSAC_VV_ENCODING = 0b11111000000000000001000001010111;
constexpr uint32_t VFWMSAC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWMSAC_VF_ENCODING = 0b11111000000000000101000001010111;
constexpr uint32_t VFWMSAC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWNMSAC_VV_ENCODING = 0b11111100000000000001000001010111;
constexpr uint32_t VFWNMSAC_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWNMSAC_VF_ENCODING = 0b11111100000000000101000001010111;
constexpr uint32_t VFWNMSAC_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSQRT_V_ENCODING = 0b1001100000000000001000001010111;
constexpr uint32_t VFSQRT_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFRSQRT7_V_ENCODING = 0b1001100000000100001000001010111;
constexpr uint32_t VFRSQRT7_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFREC7_V_ENCODING = 0b1001100000000101001000001010111;
constexpr uint32_t VFREC7_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFMIN_VV_ENCODING = 0b10000000000000001000001010111;
constexpr uint32_t VFMIN_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMIN_VF_ENCODING = 0b10000000000000101000001010111;
constexpr uint32_t VFMIN_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMAX_VV_ENCODING = 0b11000000000000001000001010111;
constexpr uint32_t VFMAX_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFMAX_VF_ENCODING = 0b11000000000000101000001010111;
constexpr uint32_t VFMAX_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSGNJ_VV_ENCODING = 0b100000000000000001000001010111;
constexpr uint32_t VFSGNJ_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSGNJ_VF_ENCODING = 0b100000000000000101000001010111;
constexpr uint32_t VFSGNJ_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSGNJN_VV_ENCODING = 0b100100000000000001000001010111;
constexpr uint32_t VFSGNJN_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSGNJN_VF_ENCODING = 0b100100000000000101000001010111;
constexpr uint32_t VFSGNJN_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSGNJX_VV_ENCODING = 0b101000000000000001000001010111;
constexpr uint32_t VFSGNJX_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSGNJX_VF_ENCODING = 0b101000000000000101000001010111;
constexpr uint32_t VFSGNJX_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFEQ_VV_ENCODING = 0b1100000000000000001000001010111;
constexpr uint32_t VMFEQ_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFEQ_VF_ENCODING = 0b1100000000000000101000001010111;
constexpr uint32_t VMFEQ_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFNE_VV_ENCODING = 0b1110000000000000001000001010111;
constexpr uint32_t VMFNE_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFNE_VF_ENCODING = 0b1110000000000000101000001010111;
constexpr uint32_t VMFNE_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFLT_VV_ENCODING = 0b1101100000000000001000001010111;
constexpr uint32_t VMFLT_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFLT_VF_ENCODING = 0b1101100000000000101000001010111;
constexpr uint32_t VMFLT_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFLE_VV_ENCODING = 0b1100100000000000001000001010111;
constexpr uint32_t VMFLE_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFLE_VF_ENCODING = 0b1100100000000000101000001010111;
constexpr uint32_t VMFLE_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFGT_VF_ENCODING = 0b1110100000000000101000001010111;
constexpr uint32_t VMFGT_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMFGE_VF_ENCODING = 0b1111100000000000101000001010111;
constexpr uint32_t VMFGE_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFCLASS_V_ENCODING = 0b1001100000010000001000001010111;
constexpr uint32_t VFCLASS_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFMERGE_VFM_ENCODING = 0b1011100000000000101000001010111;
constexpr uint32_t VFMERGE_VFM_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VFMV_V_F_ENCODING = 0b1011110000000000101000001010111;
constexpr uint32_t VFMV_V_F_MASK = 0b11111110000000000111000001111111;
constexpr uint32_t VFCVT_XU_F_V_ENCODING = 0b1001000000000000001000001010111;
constexpr uint32_t VFCVT_XU_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFCVT_X_F_V_ENCODING = 0b1001000000000001001000001010111;
constexpr uint32_t VFCVT_X_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFCVT_RTZ_XU_F_V_ENCODING = 0b1001000000000110001000001010111;
constexpr uint32_t VFCVT_RTZ_XU_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFCVT_RTZ_X_F_V_ENCODING = 0b1001000000000111001000001010111;
constexpr uint32_t VFCVT_RTZ_X_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFCVT_F_XU_V_ENCODING = 0b1001000000000010001000001010111;
constexpr uint32_t VFCVT_F_XU_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFCVT_F_X_V_ENCODING = 0b1001000000000011001000001010111;
constexpr uint32_t VFCVT_F_X_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_XU_F_V_ENCODING = 0b1001000000001000001000001010111;
constexpr uint32_t VFWCVT_XU_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_X_F_V_ENCODING = 0b1001000000001001001000001010111;
constexpr uint32_t VFWCVT_X_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_RTZ_XU_F_V_ENCODING = 0b1001000000001110001000001010111;
constexpr uint32_t VFWCVT_RTZ_XU_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_RTZ_X_F_V_ENCODING = 0b1001000000001111001000001010111;
constexpr uint32_t VFWCVT_RTZ_X_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_F_XU_V_ENCODING = 0b1001000000001010001000001010111;
constexpr uint32_t VFWCVT_F_XU_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_F_X_V_ENCODING = 0b1001000000001011001000001010111;
constexpr uint32_t VFWCVT_F_X_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFWCVT_F_F_V_ENCODING = 0b1001000000001100001000001010111;
constexpr uint32_t VFWCVT_F_F_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_XU_F_W_ENCODING = 0b1001000000010000001000001010111;
constexpr uint32_t VFNCVT_XU_F_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_X_F_W_ENCODING = 0b1001000000010001001000001010111;
constexpr uint32_t VFNCVT_X_F_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_RTZ_XU_F_W_ENCODING = 0b1001000000010110001000001010111;
constexpr uint32_t VFNCVT_RTZ_XU_F_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_RTZ_X_F_W_ENCODING = 0b1001000000010111001000001010111;
constexpr uint32_t VFNCVT_RTZ_X_F_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_F_XU_W_ENCODING = 0b1001000000010010001000001010111;
constexpr uint32_t VFNCVT_F_XU_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_F_X_W_ENCODING = 0b1001000000010011001000001010111;
constexpr uint32_t VFNCVT_F_X_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_F_F_W_ENCODING = 0b1001000000010100001000001010111;
constexpr uint32_t VFNCVT_F_F_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFNCVT_ROD_F_F_W_ENCODING = 0b1001000000010101001000001010111;
constexpr uint32_t VFNCVT_ROD_F_F_W_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VREDSUM_VS_ENCODING = 0b10000001010111;
constexpr uint32_t VREDSUM_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDMAXU_VS_ENCODING = 0b11000000000000010000001010111;
constexpr uint32_t VREDMAXU_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDMAX_VS_ENCODING = 0b11100000000000010000001010111;
constexpr uint32_t VREDMAX_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDMINU_VS_ENCODING = 0b10000000000000010000001010111;
constexpr uint32_t VREDMINU_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDMIN_VS_ENCODING = 0b10100000000000010000001010111;
constexpr uint32_t VREDMIN_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDAND_VS_ENCODING = 0b100000000000010000001010111;
constexpr uint32_t VREDAND_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDOR_VS_ENCODING = 0b1000000000000010000001010111;
constexpr uint32_t VREDOR_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VREDXOR_VS_ENCODING = 0b1100000000000010000001010111;
constexpr uint32_t VREDXOR_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWREDSUMU_VS_ENCODING = 0b11000000000000000000000001010111;
constexpr uint32_t VWREDSUMU_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VWREDSUM_VS_ENCODING = 0b11000100000000000000000001010111;
constexpr uint32_t VWREDSUM_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFREDUSUM_VS_ENCODING = 0b100000000000001000001010111;
constexpr uint32_t VFREDUSUM_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFREDOSUM_VS_ENCODING = 0b1100000000000001000001010111;
constexpr uint32_t VFREDOSUM_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFREDMAX_VS_ENCODING = 0b11100000000000001000001010111;
constexpr uint32_t VFREDMAX_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFREDMIN_VS_ENCODING = 0b10100000000000001000001010111;
constexpr uint32_t VFREDMIN_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWREDUSUM_VS_ENCODING = 0b11000100000000000001000001010111;
constexpr uint32_t VFWREDUSUM_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFWREDOSUM_VS_ENCODING = 0b11001100000000000001000001010111;
constexpr uint32_t VFWREDOSUM_VS_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMAND_MM_ENCODING = 0b1100100000000000010000001010111;
constexpr uint32_t VMAND_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMNAND_MM_ENCODING = 0b1110100000000000010000001010111;
constexpr uint32_t VMNAND_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMANDN_MM_ENCODING = 0b1100000000000000010000001010111;
constexpr uint32_t VMANDN_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMXOR_MM_ENCODING = 0b1101100000000000010000001010111;
constexpr uint32_t VMXOR_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMOR_MM_ENCODING = 0b1101000000000000010000001010111;
constexpr uint32_t VMOR_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMNOR_MM_ENCODING = 0b1111000000000000010000001010111;
constexpr uint32_t VMNOR_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMORN_MM_ENCODING = 0b1110000000000000010000001010111;
constexpr uint32_t VMORN_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMXNOR_MM_ENCODING = 0b1111100000000000010000001010111;
constexpr uint32_t VMXNOR_MM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VCPOP_M_ENCODING = 0b1000000000010000010000001010111;
constexpr uint32_t VCPOP_M_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFIRST_M_ENCODING = 0b1000000000010001010000001010111;
constexpr uint32_t VFIRST_M_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VMSBF_M_ENCODING = 0b1010000000000001010000001010111;
constexpr uint32_t VMSBF_M_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VMSIF_M_ENCODING = 0b1010000000000011010000001010111;
constexpr uint32_t VMSIF_M_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VMSOF_M_ENCODING = 0b1010000000000010010000001010111;
constexpr uint32_t VMSOF_M_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VIOTA_M_ENCODING = 0b1010000000010000010000001010111;
constexpr uint32_t VIOTA_M_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VID_V_ENCODING = 0b1010000000010001010000001010111;
constexpr uint32_t VID_V_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VMV_X_S_ENCODING = 0b1000000000000000010000001010111;
constexpr uint32_t VMV_X_S_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VMV_S_X_ENCODING = 0b1000000000000000110000001010111;
constexpr uint32_t VMV_S_X_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VFMV_F_S_ENCODING = 0b1000000000000000001000001010111;
constexpr uint32_t VFMV_F_S_MASK = 0b11111100000011111111000001111111;
constexpr uint32_t VFMV_S_F_ENCODING = 0b1000000000000000101000001010111;
constexpr uint32_t VFMV_S_F_MASK = 0b11111101111100000111000001111111;
constexpr uint32_t VSLIDEUP_VX_ENCODING = 0b111000000000000100000001010111;
constexpr uint32_t VSLIDEUP_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLIDEUP_VI_ENCODING = 0b111000000000000011000001010111;
constexpr uint32_t VSLIDEUP_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLIDEDOWN_VX_ENCODING = 0b111100000000000100000001010111;
constexpr uint32_t VSLIDEDOWN_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLIDEDOWN_VI_ENCODING = 0b111100000000000011000001010111;
constexpr uint32_t VSLIDEDOWN_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLIDE1UP_VX_ENCODING = 0b111000000000000110000001010111;
constexpr uint32_t VSLIDE1UP_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSLIDE1UP_VF_ENCODING = 0b111000000000000101000001010111;
constexpr uint32_t VFSLIDE1UP_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VSLIDE1DOWN_VX_ENCODING = 0b111100000000000110000001010111;
constexpr uint32_t VSLIDE1DOWN_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VFSLIDE1DOWN_VF_ENCODING = 0b111100000000000101000001010111;
constexpr uint32_t VFSLIDE1DOWN_VF_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VRGATHER_VV_ENCODING = 0b110000000000000000000001010111;
constexpr uint32_t VRGATHER_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VRGATHEREI16_VV_ENCODING = 0b111000000000000000000001010111;
constexpr uint32_t VRGATHEREI16_VV_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VRGATHER_VX_ENCODING = 0b110000000000000100000001010111;
constexpr uint32_t VRGATHER_VX_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VRGATHER_VI_ENCODING = 0b110000000000000011000001010111;
constexpr uint32_t VRGATHER_VI_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VCOMPRESS_VM_ENCODING = 0b1011100000000000010000001010111;
constexpr uint32_t VCOMPRESS_VM_MASK = 0b11111100000000000111000001111111;
constexpr uint32_t VMV_NR_R_V_ENCODING = 0b10011100000000000011000001010111;
constexpr uint32_t VMV_NR_R_V_MASK = 0b11111100000000000111000001111111;
// RV-V Extension End -- Placeholder 0

/*
 * check isa_config (RV_ISA_Config) if given extension is supported
 * return current function with UNSUP, if not
 * TODO: NOTE RVCOMMON.01 (RV32E/RV64E) see above
 */
#define REQUIRE_ISA(_ext_bit)           \
	if (!(isa_config.cfg & (_ext_bit))) \
		return Opcode::UNSUP;

#define MATCH_AND_RETURN_INSTR2(_instr, _op)                         \
	if (unlikely((data() & (_instr##_MASK)) != (_instr##_ENCODING))) \
		return Opcode::UNDEF;                                        \
	return (_op);

#define MATCH_AND_RETURN_INSTR(_op) MATCH_AND_RETURN_INSTR2(_op, _op)

namespace Compressed {
enum Opcode {
	// quadrant zero
	C_Illegal,
	C_Reserved,
	C_ADDI4SPN,
	C_FLD,
	C_LQ,  // RV128
	C_LW,
	C_FLW,
	C_LD,

	C_FSD,
	C_SQ,  // RV128
	C_SW,
	C_FSW,
	C_SD,

	// quadrant one
	C_NOP,
	C_ADDI,
	C_JAL,
	C_ADDIW,
	C_LI,
	C_ADDI16SP,
	C_LUI,
	C_SRLI,
	C_SRAI,
	C_ANDI,
	C_SUB,
	C_XOR,
	C_OR,
	C_AND,
	C_SUBW,
	C_ADDW,
	C_J,
	C_BEQZ,
	C_BNEZ,

	// quadrant two
	C_SLLI,
	C_FLDSP,
	C_LQSP,  // RV128
	C_LWSP,
	C_FLWSP,
	C_LDSP,
	C_JR,
	C_MV,
	C_EBREAK,
	C_JALR,
	C_ADD,
	C_FSDSP,
	C_SQSP,  // RV128
	C_SWSP,
	C_FSWSP,
	C_SDSP,
};
}

std::array<const char *, 32> Opcode::regnamePrettyStr = {
    "zero", "ra", "sp", "gp", "tp", "t0", "t1", "t2", "s0/fp", "s1", "a0",  "a1",  "a2", "a3", "a4", "a5",
    "a6",   "a7", "s2", "s3", "s4", "s5", "s6", "s7", "s8",    "s9", "s10", "s11", "t3", "t4", "t5", "t6"};

/*
Python snippet to generate the "mappingStr":

for e in [e.strip().replace(",", "") for e in s.strip().split("\n")]:
    if "//" in e or len(e) == 0:
        print(e)
    else:
        print('"{}",'.format(e))
 */
std::array<const char *, Opcode::NUMBER_OF_INSTRUCTIONS> Opcode::mappingStr = {
    "ZERO-INVALID",
    "UNSUP/DISABLED",

    // RV32I base instruction set
    "LUI",
    "NOP (LUI rd=zero)",
    "AUIPC",
    "NOP (AUIPC rd=zero)",
    "JAL",
    "J (JAL rd=zero)",
    "JALR",
    "JR (JALR rd=zero)",
    "BEQ",
    "BNE",
    "BLT",
    "BGE",
    "BLTU",
    "BGEU",
    "LB",
    "LH",
    "LW",
    "LBU",
    "LHU",
    "SB",
    "SH",
    "SW",
    "ADDI",
    "NOP (ADDI rd=zero)",
    "SLTI",
    "NOP (SLTI rd=zero)",
    "SLTIU",
    "NOP (SLTIU rd=zero)",
    "XORI",
    "NOP (XORI rd=zero)",
    "ORI",
    "NOP (ORI rd=zero)",
    "ANDI",
    "NOP (ANDI rd=zero)",
    "SLLI",
    "NOP (SLLI rd=zero)",
    "SRLI",
    "NOP (SRLI rd=zero)",
    "SRAI",
    "NOP (SRAI rd=zero)",
    "ADD",
    "NOP (ADD rd=zero)",
    "SUB",
    "NOP (SUB rd=zero)",
    "SLL",
    "NOP (SLL rd=zero)",
    "SLT",
    "NOP (SLT rd=zero)",
    "SLTU",
    "NOP (SLTU rd=zero)",
    "XOR",
    "NOP (XOR rd=zero)",
    "SRL",
    "NOP (SRL rd=zero)",
    "SRA",
    "NOP (SRA rd=zero)",
    "OR",
    "NOP (OR rd=zero)",
    "AND",
    "NOP (AND rd=zero)",
    "FENCE",
    "ECALL",
    "EBREAK",

    // Zifencei standard extension
    "FENCE_I",

    // Zicsr standard extension
    "CSRRW",
    "CSRRS",
    "CSRRC",
    "CSRRWI",
    "CSRRSI",
    "CSRRCI",

    // RV32M Standard Extension
    "MUL",
    "NOP (MUL rd=zero)",
    "MULH",
    "NOP (MULH rd=zero)",
    "MULHSU",
    "NOP (MULHSU rd=zero)",
    "MULHU",
    "NOP (MULHU rd=zero)",
    "DIV",
    "NOP (DIV rd=zero)",
    "DIVU",
    "NOP (DIVU rd=zero)",
    "REM",
    "NOP (REM rd=zero)",
    "REMU",
    "NOP (REMU rd=zero)",

    // RV32A Standard Extension
    "LR_W",
    "SC_W",
    "AMOSWAP_W",
    "AMOADD_W",
    "AMOXOR_W",
    "AMOAND_W",
    "AMOOR_W",
    "AMOMIN_W",
    "AMOMAX_W",
    "AMOMINU_W",
    "AMOMAXU_W",

    // RV64I base integer set (addition to RV32I)
    "LWU",
    "LD",
    "SD",
    "ADDIW",
    "NOP (ADDIW rd=zero)",
    "SLLIW",
    "NOP (SLLIW rd=zero)",
    "SRLIW",
    "NOP (SRLIW rd=zero)",
    "SRAIW",
    "NOP (SRAIW rd=zero)",
    "ADDW",
    "NOP (ADDW rd=zero)",
    "SUBW",
    "NOP (SUBW rd=zero)",
    "SLLW",
    "NOP (SLLW rd=zero)",
    "SRLW",
    "NOP (SRLW rd=zero)",
    "SRAW",
    "NOP (SRAW rd=zero)",

    // RV64M standard extension (addition to RV32M)
    "MULW",
    "NOP (MULW rd=zero)",
    "DIVW",
    "NOP (DIVW rd=zero)",
    "DIVUW",
    "NOP (DIVUW rd=zero)",
    "REMW",
    "NOP (REMW rd=zero)",
    "REMUW",
    "NOP (REMUW rd=zero)",

    // RV64A standard extension (addition to RV32A)
    "LR_D",
    "SC_D",
    "AMOSWAP_D",
    "AMOADD_D",
    "AMOXOR_D",
    "AMOAND_D",
    "AMOOR_D",
    "AMOMIN_D",
    "AMOMAX_D",
    "AMOMINU_D",
    "AMOMAXU_D",

    // RV32Zfh standard extension
    "FLH",
    "FSH",
    "FMADD_H",
    "FMSUB_H",
    "FNMADD_H",
    "FNMSUB_H",
    "FADD_H",
    "FSUB_H",
    "FMUL_H",
    "FDIV_H",
    "FSQRT_H",
    "FSGNJ_H",
    "FSGNJN_H",
    "FSGNJX_H",
    "FMIN_H",
    "FMAX_H",
    "FCVT_W_H",
    "FCVT_WU_H",
    "FMV_X_H",
    "FEQ_H",
    "FLT_H",
    "FLE_H",
    "FCLASS_H",
    "FCVT_H_W",
    "FCVT_H_WU",
    "FMV_H_X",
    "FCVT_S_H",
    "FCVT_H_S",
    "FCVT_H_D",
    "FCVT_D_H",

    // RV64Zfh standard extension
    "FCVT_L_H",
    "FCVT_LU_H",
    "FCVT_H_L",
    "FCVT_H_LU",

    // RV32F standard extension
    "FLW",
    "FSW",
    "FMADD_S",
    "FMSUB_S",
    "FNMADD_S",
    "FNMSUB_S",
    "FADD_S",
    "FSUB_S",
    "FMUL_S",
    "FDIV_S",
    "FSQRT_S",
    "FSGNJ_S",
    "FSGNJN_S",
    "FSGNJX_S",
    "FMIN_S",
    "FMAX_S",
    "FCVT_W_S",
    "FCVT_WU_S",
    "FMV_X_W",
    "FEQ_S",
    "FLT_S",
    "FLE_S",
    "FCLASS_S",
    "FCVT_S_W",
    "FCVT_S_WU",
    "FMV_W_X",

    // RV64F standard extension (addition to RV32F)
    "FCVT_L_S",
    "FCVT_LU_S",
    "FCVT_S_L",
    "FCVT_S_LU",

    // RV32D standard extension
    "FLD",
    "FSD",
    "FMADD_D",
    "FMSUB_D",
    "FNMSUB_D",
    "FNMADD_D",
    "FADD_D",
    "FSUB_D",
    "FMUL_D",
    "FDIV_D",
    "FSQRT_D",
    "FSGNJ_D",
    "FSGNJN_D",
    "FSGNJX_D",
    "FMIN_D",
    "FMAX_D",
    "FCVT_S_D",
    "FCVT_D_S",
    "FEQ_D",
    "FLT_D",
    "FLE_D",
    "FCLASS_D",
    "FCVT_W_D",
    "FCVT_WU_D",
    "FCVT_D_W",
    "FCVT_D_WU",

    // RV64D standard extension (addition to RV32D)
    "FCVT_L_D",
    "FCVT_LU_D",
    "FMV_X_D",
    "FCVT_D_L",
    "FCVT_D_LU",
    "FMV_D_X",

    // RV-V Extension Start -- Placeholder 2
    "VSETVLI",
    "VSETIVLI",
    "VSETVL",
    "VLM.V",
    "VSM.V",
    "VLE8.V",
    "VLE16.V",
    "VLE32.V",
    "VLE64.V",
    "VSE8.V",
    "VSE16.V",
    "VSE32.V",
    "VSE64.V",
    "VLSE8.V",
    "VLSE16.V",
    "VLSE32.V",
    "VLSE64.V",
    "VSSE8.V",
    "VSSE16.V",
    "VSSE32.V",
    "VSSE64.V",
    "VLUXEI8.V",
    "VLUXEI16.V",
    "VLUXEI32.V",
    "VLUXEI64.V",
    "VLOXEI8.V",
    "VLOXEI16.V",
    "VLOXEI32.V",
    "VLOXEI64.V",
    "VSUXEI8.V",
    "VSUXEI16.V",
    "VSUXEI32.V",
    "VSUXEI64.V",
    "VSOXEI8.V",
    "VSOXEI16.V",
    "VSOXEI32.V",
    "VSOXEI64.V",
    "VLE8FF.V",
    "VLE16FF.V",
    "VLE32FF.V",
    "VLE64FF.V",
    "VLSEG2E8.V",
    "VLSEG2E16.V",
    "VLSEG2E32.V",
    "VLSEG2E64.V",
    "VSSEG2E8.V",
    "VSSEG2E16.V",
    "VSSEG2E32.V",
    "VSSEG2E64.V",
    "VLSSEG2E8.V",
    "VLSSEG2E16.V",
    "VLSSEG2E32.V",
    "VLSSEG2E64.V",
    "VSSSEG2E8.V",
    "VSSSEG2E16.V",
    "VSSSEG2E32.V",
    "VSSSEG2E64.V",
    "VLUXSEG2EI8.V",
    "VLUXSEG2EI16.V",
    "VLUXSEG2EI32.V",
    "VLUXSEG2EI64.V",
    "VLOXSEG2EI8.V",
    "VLOXSEG2EI16.V",
    "VLOXSEG2EI32.V",
    "VLOXSEG2EI64.V",
    "VSUXSEG2EI8.V",
    "VSUXSEG2EI16.V",
    "VSUXSEG2EI32.V",
    "VSUXSEG2EI64.V",
    "VSOXSEG2EI8.V",
    "VSOXSEG2EI16.V",
    "VSOXSEG2EI32.V",
    "VSOXSEG2EI64.V",
    "VLSEG2E8FF.V",
    "VLSEG2E16FF.V",
    "VLSEG2E32FF.V",
    "VLSEG2E64FF.V",
    "VLSEG3E8.V",
    "VLSEG3E16.V",
    "VLSEG3E32.V",
    "VLSEG3E64.V",
    "VSSEG3E8.V",
    "VSSEG3E16.V",
    "VSSEG3E32.V",
    "VSSEG3E64.V",
    "VLSSEG3E8.V",
    "VLSSEG3E16.V",
    "VLSSEG3E32.V",
    "VLSSEG3E64.V",
    "VSSSEG3E8.V",
    "VSSSEG3E16.V",
    "VSSSEG3E32.V",
    "VSSSEG3E64.V",
    "VLUXSEG3EI8.V",
    "VLUXSEG3EI16.V",
    "VLUXSEG3EI32.V",
    "VLUXSEG3EI64.V",
    "VLOXSEG3EI8.V",
    "VLOXSEG3EI16.V",
    "VLOXSEG3EI32.V",
    "VLOXSEG3EI64.V",
    "VSUXSEG3EI8.V",
    "VSUXSEG3EI16.V",
    "VSUXSEG3EI32.V",
    "VSUXSEG3EI64.V",
    "VSOXSEG3EI8.V",
    "VSOXSEG3EI16.V",
    "VSOXSEG3EI32.V",
    "VSOXSEG3EI64.V",
    "VLSEG3E8FF.V",
    "VLSEG3E16FF.V",
    "VLSEG3E32FF.V",
    "VLSEG3E64FF.V",
    "VLSEG4E8.V",
    "VLSEG4E16.V",
    "VLSEG4E32.V",
    "VLSEG4E64.V",
    "VSSEG4E8.V",
    "VSSEG4E16.V",
    "VSSEG4E32.V",
    "VSSEG4E64.V",
    "VLSSEG4E8.V",
    "VLSSEG4E16.V",
    "VLSSEG4E32.V",
    "VLSSEG4E64.V",
    "VSSSEG4E8.V",
    "VSSSEG4E16.V",
    "VSSSEG4E32.V",
    "VSSSEG4E64.V",
    "VLUXSEG4EI8.V",
    "VLUXSEG4EI16.V",
    "VLUXSEG4EI32.V",
    "VLUXSEG4EI64.V",
    "VLOXSEG4EI8.V",
    "VLOXSEG4EI16.V",
    "VLOXSEG4EI32.V",
    "VLOXSEG4EI64.V",
    "VSUXSEG4EI8.V",
    "VSUXSEG4EI16.V",
    "VSUXSEG4EI32.V",
    "VSUXSEG4EI64.V",
    "VSOXSEG4EI8.V",
    "VSOXSEG4EI16.V",
    "VSOXSEG4EI32.V",
    "VSOXSEG4EI64.V",
    "VLSEG4E8FF.V",
    "VLSEG4E16FF.V",
    "VLSEG4E32FF.V",
    "VLSEG4E64FF.V",
    "VLSEG5E8.V",
    "VLSEG5E16.V",
    "VLSEG5E32.V",
    "VLSEG5E64.V",
    "VSSEG5E8.V",
    "VSSEG5E16.V",
    "VSSEG5E32.V",
    "VSSEG5E64.V",
    "VLSSEG5E8.V",
    "VLSSEG5E16.V",
    "VLSSEG5E32.V",
    "VLSSEG5E64.V",
    "VSSSEG5E8.V",
    "VSSSEG5E16.V",
    "VSSSEG5E32.V",
    "VSSSEG5E64.V",
    "VLUXSEG5EI8.V",
    "VLUXSEG5EI16.V",
    "VLUXSEG5EI32.V",
    "VLUXSEG5EI64.V",
    "VLOXSEG5EI8.V",
    "VLOXSEG5EI16.V",
    "VLOXSEG5EI32.V",
    "VLOXSEG5EI64.V",
    "VSUXSEG5EI8.V",
    "VSUXSEG5EI16.V",
    "VSUXSEG5EI32.V",
    "VSUXSEG5EI64.V",
    "VSOXSEG5EI8.V",
    "VSOXSEG5EI16.V",
    "VSOXSEG5EI32.V",
    "VSOXSEG5EI64.V",
    "VLSEG5E8FF.V",
    "VLSEG5E16FF.V",
    "VLSEG5E32FF.V",
    "VLSEG5E64FF.V",
    "VLSEG6E8.V",
    "VLSEG6E16.V",
    "VLSEG6E32.V",
    "VLSEG6E64.V",
    "VSSEG6E8.V",
    "VSSEG6E16.V",
    "VSSEG6E32.V",
    "VSSEG6E64.V",
    "VLSSEG6E8.V",
    "VLSSEG6E16.V",
    "VLSSEG6E32.V",
    "VLSSEG6E64.V",
    "VSSSEG6E8.V",
    "VSSSEG6E16.V",
    "VSSSEG6E32.V",
    "VSSSEG6E64.V",
    "VLUXSEG6EI8.V",
    "VLUXSEG6EI16.V",
    "VLUXSEG6EI32.V",
    "VLUXSEG6EI64.V",
    "VLOXSEG6EI8.V",
    "VLOXSEG6EI16.V",
    "VLOXSEG6EI32.V",
    "VLOXSEG6EI64.V",
    "VSUXSEG6EI8.V",
    "VSUXSEG6EI16.V",
    "VSUXSEG6EI32.V",
    "VSUXSEG6EI64.V",
    "VSOXSEG6EI8.V",
    "VSOXSEG6EI16.V",
    "VSOXSEG6EI32.V",
    "VSOXSEG6EI64.V",
    "VLSEG6E8FF.V",
    "VLSEG6E16FF.V",
    "VLSEG6E32FF.V",
    "VLSEG6E64FF.V",
    "VLSEG7E8.V",
    "VLSEG7E16.V",
    "VLSEG7E32.V",
    "VLSEG7E64.V",
    "VSSEG7E8.V",
    "VSSEG7E16.V",
    "VSSEG7E32.V",
    "VSSEG7E64.V",
    "VLSSEG7E8.V",
    "VLSSEG7E16.V",
    "VLSSEG7E32.V",
    "VLSSEG7E64.V",
    "VSSSEG7E8.V",
    "VSSSEG7E16.V",
    "VSSSEG7E32.V",
    "VSSSEG7E64.V",
    "VLUXSEG7EI8.V",
    "VLUXSEG7EI16.V",
    "VLUXSEG7EI32.V",
    "VLUXSEG7EI64.V",
    "VLOXSEG7EI8.V",
    "VLOXSEG7EI16.V",
    "VLOXSEG7EI32.V",
    "VLOXSEG7EI64.V",
    "VSUXSEG7EI8.V",
    "VSUXSEG7EI16.V",
    "VSUXSEG7EI32.V",
    "VSUXSEG7EI64.V",
    "VSOXSEG7EI8.V",
    "VSOXSEG7EI16.V",
    "VSOXSEG7EI32.V",
    "VSOXSEG7EI64.V",
    "VLSEG7E8FF.V",
    "VLSEG7E16FF.V",
    "VLSEG7E32FF.V",
    "VLSEG7E64FF.V",
    "VLSEG8E8.V",
    "VLSEG8E16.V",
    "VLSEG8E32.V",
    "VLSEG8E64.V",
    "VSSEG8E8.V",
    "VSSEG8E16.V",
    "VSSEG8E32.V",
    "VSSEG8E64.V",
    "VLSSEG8E8.V",
    "VLSSEG8E16.V",
    "VLSSEG8E32.V",
    "VLSSEG8E64.V",
    "VSSSEG8E8.V",
    "VSSSEG8E16.V",
    "VSSSEG8E32.V",
    "VSSSEG8E64.V",
    "VLUXSEG8EI8.V",
    "VLUXSEG8EI16.V",
    "VLUXSEG8EI32.V",
    "VLUXSEG8EI64.V",
    "VLOXSEG8EI8.V",
    "VLOXSEG8EI16.V",
    "VLOXSEG8EI32.V",
    "VLOXSEG8EI64.V",
    "VSUXSEG8EI8.V",
    "VSUXSEG8EI16.V",
    "VSUXSEG8EI32.V",
    "VSUXSEG8EI64.V",
    "VSOXSEG8EI8.V",
    "VSOXSEG8EI16.V",
    "VSOXSEG8EI32.V",
    "VSOXSEG8EI64.V",
    "VLSEG8E8FF.V",
    "VLSEG8E16FF.V",
    "VLSEG8E32FF.V",
    "VLSEG8E64FF.V",
    "VL1RE8.V",
    "VL1RE16.V",
    "VL1RE32.V",
    "VL1RE64.V",
    "VS1R.V",
    "VL2RE8.V",
    "VL2RE16.V",
    "VL2RE32.V",
    "VL2RE64.V",
    "VS2R.V",
    "VL4RE8.V",
    "VL4RE16.V",
    "VL4RE32.V",
    "VL4RE64.V",
    "VS4R.V",
    "VL8RE8.V",
    "VL8RE16.V",
    "VL8RE32.V",
    "VL8RE64.V",
    "VS8R.V",
    "VADD.VV",
    "VADD.VI",
    "VADD.VX",
    "VSUB.VV",
    "VSUB.VX",
    "VRSUB.VX",
    "VRSUB.VI",
    "VWADD.VV",
    "VWADD.VX",
    "VWSUB.VV",
    "VWSUB.VX",
    "VWADDU.VV",
    "VWADDU.VX",
    "VWSUBU.VV",
    "VWSUBU.VX",
    "VWADD.WV",
    "VWADD.WX",
    "VWSUB.WV",
    "VWSUB.WX",
    "VWADDU.WV",
    "VWADDU.WX",
    "VWSUBU.WV",
    "VWSUBU.WX",
    "VZEXT.VF2",
    "VSEXT.VF2",
    "VZEXT.VF4",
    "VSEXT.VF4",
    "VZEXT.VF8",
    "VSEXT.VF8",
    "VADC.VVM",
    "VADC.VXM",
    "VADC.VIM",
    "VMADC.VVM",
    "VMADC.VXM",
    "VMADC.VIM",
    "VMADC.VV",
    "VMADC.VX",
    "VMADC.VI",
    "VSBC.VVM",
    "VSBC.VXM",
    "VMSBC.VVM",
    "VMSBC.VXM",
    "VMSBC.VV",
    "VMSBC.VX",
    "VAND.VI",
    "VAND.VV",
    "VAND.VX",
    "VOR.VV",
    "VOR.VI",
    "VOR.VX",
    "VXOR.VV",
    "VXOR.VI",
    "VXOR.VX",
    "VSLL.VI",
    "VSLL.VV",
    "VSLL.VX",
    "VSRL.VV",
    "VSRL.VI",
    "VSRL.VX",
    "VSRA.VV",
    "VSRA.VI",
    "VSRA.VX",
    "VNSRL.WV",
    "VNSRL.WI",
    "VNSRL.WX",
    "VNSRA.WV",
    "VNSRA.WI",
    "VNSRA.WX",
    "VMSEQ.VV",
    "VMSEQ.VX",
    "VMSEQ.VI",
    "VMSNE.VV",
    "VMSNE.VX",
    "VMSNE.VI",
    "VMSLTU.VV",
    "VMSLTU.VX",
    "VMSLT.VV",
    "VMSLT.VX",
    "VMSLEU.VV",
    "VMSLEU.VX",
    "VMSLEU.VI",
    "VMSLE.VV",
    "VMSLE.VX",
    "VMSLE.VI",
    "VMSGTU.VX",
    "VMSGTU.VI",
    "VMSGT.VX",
    "VMSGT.VI",
    "VMINU.VV",
    "VMINU.VX",
    "VMIN.VV",
    "VMIN.VX",
    "VMAXU.VV",
    "VMAXU.VX",
    "VMAX.VV",
    "VMAX.VX",
    "VMUL.VV",
    "VMUL.VX",
    "VMULH.VV",
    "VMULH.VX",
    "VMULHU.VV",
    "VMULHU.VX",
    "VMULHSU.VV",
    "VMULHSU.VX",
    "VDIVU.VV",
    "VDIVU.VX",
    "VDIV.VV",
    "VDIV.VX",
    "VREMU.VV",
    "VREMU.VX",
    "VREM.VV",
    "VREM.VX",
    "VWMUL.VV",
    "VWMUL.VX",
    "VWMULU.VV",
    "VWMULU.VX",
    "VWMULSU.VV",
    "VWMULSU.VX",
    "VMACC.VV",
    "VMACC.VX",
    "VNMSAC.VV",
    "VNMSAC.VX",
    "VMADD.VV",
    "VMADD.VX",
    "VNMSUB.VV",
    "VNMSUB.VX",
    "VWMACCU.VV",
    "VWMACCU.VX",
    "VWMACC.VV",
    "VWMACC.VX",
    "VWMACCSU.VV",
    "VWMACCSU.VX",
    "VWMACCUS.VX",
    "VMERGE.VVM",
    "VMERGE.VXM",
    "VMERGE.VIM",
    "VMV.V.V",
    "VMV.V.X",
    "VMV.V.I",
    "VSADDU.VV",
    "VSADDU.VX",
    "VSADDU.VI",
    "VSADD.VV",
    "VSADD.VX",
    "VSADD.VI",
    "VSSUBU.VV",
    "VSSUBU.VX",
    "VSSUB.VV",
    "VSSUB.VX",
    "VAADDU.VV",
    "VAADDU.VX",
    "VAADD.VV",
    "VAADD.VX",
    "VASUBU.VV",
    "VASUBU.VX",
    "VASUB.VV",
    "VASUB.VX",
    "VSMUL.VV",
    "VSMUL.VX",
    "VSSRL.VV",
    "VSSRL.VX",
    "VSSRL.VI",
    "VSSRA.VV",
    "VSSRA.VX",
    "VSSRA.VI",
    "VNCLIPU.WV",
    "VNCLIPU.WX",
    "VNCLIPU.WI",
    "VNCLIP.WV",
    "VNCLIP.WX",
    "VNCLIP.WI",
    "VFADD.VV",
    "VFADD.VF",
    "VFSUB.VV",
    "VFSUB.VF",
    "VFRSUB.VF",
    "VFWADD.VV",
    "VFWADD.VF",
    "VFWSUB.VV",
    "VFWSUB.VF",
    "VFWADD.WV",
    "VFWADD.WF",
    "VFWSUB.WV",
    "VFWSUB.WF",
    "VFMUL.VV",
    "VFMUL.VF",
    "VFDIV.VV",
    "VFDIV.VF",
    "VFRDIV.VF",
    "VFWMUL.VV",
    "VFWMUL.VF",
    "VFMACC.VV",
    "VFMACC.VF",
    "VFNMACC.VV",
    "VFNMACC.VF",
    "VFMSAC.VV",
    "VFMSAC.VF",
    "VFNMSAC.VV",
    "VFNMSAC.VF",
    "VFMADD.VV",
    "VFMADD.VF",
    "VFNMADD.VV",
    "VFNMADD.VF",
    "VFMSUB.VV",
    "VFMSUB.VF",
    "VFNMSUB.VV",
    "VFNMSUB.VF",
    "VFWMACC.VV",
    "VFWMACC.VF",
    "VFWNMACC.VV",
    "VFWNMACC.VF",
    "VFWMSAC.VV",
    "VFWMSAC.VF",
    "VFWNMSAC.VV",
    "VFWNMSAC.VF",
    "VFSQRT.V",
    "VFRSQRT7.V",
    "VFREC7.V",
    "VFMIN.VV",
    "VFMIN.VF",
    "VFMAX.VV",
    "VFMAX.VF",
    "VFSGNJ.VV",
    "VFSGNJ.VF",
    "VFSGNJN.VV",
    "VFSGNJN.VF",
    "VFSGNJX.VV",
    "VFSGNJX.VF",
    "VMFEQ.VV",
    "VMFEQ.VF",
    "VMFNE.VV",
    "VMFNE.VF",
    "VMFLT.VV",
    "VMFLT.VF",
    "VMFLE.VV",
    "VMFLE.VF",
    "VMFGT.VF",
    "VMFGE.VF",
    "VFCLASS.V",
    "VFMERGE.VFM",
    "VFMV.V.F",
    "VFCVT.XU.F.V",
    "VFCVT.X.F.V",
    "VFCVT.RTZ.XU.F.V",
    "VFCVT.RTZ.X.F.V",
    "VFCVT.F.XU.V",
    "VFCVT.F.X.V",
    "VFWCVT.XU.F.V",
    "VFWCVT.X.F.V",
    "VFWCVT.RTZ.XU.F.V",
    "VFWCVT.RTZ.X.F.V",
    "VFWCVT.F.XU.V",
    "VFWCVT.F.X.V",
    "VFWCVT.F.F.V",
    "VFNCVT.XU.F.W",
    "VFNCVT.X.F.W",
    "VFNCVT.RTZ.XU.F.W",
    "VFNCVT.RTZ.X.F.W",
    "VFNCVT.F.XU.W",
    "VFNCVT.F.X.W",
    "VFNCVT.F.F.W",
    "VFNCVT.ROD.F.F.W",
    "VREDSUM.VS",
    "VREDMAXU.VS",
    "VREDMAX.VS",
    "VREDMINU.VS",
    "VREDMIN.VS",
    "VREDAND.VS",
    "VREDOR.VS",
    "VREDXOR.VS",
    "VWREDSUMU.VS",
    "VWREDSUM.VS",
    "VFREDUSUM.VS",
    "VFREDOSUM.VS",
    "VFREDMAX.VS",
    "VFREDMIN.VS",
    "VFWREDUSUM.VS",
    "VFWREDOSUM.VS",
    "VMAND.MM",
    "VMNAND.MM",
    "VMANDN.MM",
    "VMXOR.MM",
    "VMOR.MM",
    "VMNOR.MM",
    "VMORN.MM",
    "VMXNOR.MM",
    "VCPOP.M",
    "VFIRST.M",
    "VMSBF.M",
    "VMSIF.M",
    "VMSOF.M",
    "VIOTA.M",
    "VID.V",
    "VMV.X.S",
    "VMV.S.X",
    "VFMV.F.S",
    "VFMV.S.F",
    "VSLIDEUP.VX",
    "VSLIDEUP.VI",
    "VSLIDEDOWN.VX",
    "VSLIDEDOWN.VI",
    "VSLIDE1UP.VX",
    "VFSLIDE1UP.VF",
    "VSLIDE1DOWN.VX",
    "VFSLIDE1DOWN.VF",
    "VRGATHER.VV",
    "VRGATHEREI16.VV",
    "VRGATHER.VX",
    "VRGATHER.VI",
    "VCOMPRESS.VM",
    "VMV.NR.R.V",
    // RV-V Extension End -- Placeholder 2

    // privileged instructions
    "URET",
    "SRET",
    "MRET",
    "WFI",
    "SFENCE_VMA",
};

Opcode::Type Opcode::getType(Opcode::Mapping mapping) {
	switch (mapping) {
		case ADD:
		case ADD_NOP:
		case SUB:
		case SUB_NOP:
		case SLL:
		case SLL_NOP:
		case SLT:
		case SLT_NOP:
		case SLTU:
		case SLTU_NOP:
		case XOR:
		case XOR_NOP:
		case SRL:
		case SRL_NOP:
		case SRA:
		case SRA_NOP:
		case OR:
		case OR_NOP:
		case AND:
		case AND_NOP:
		case SFENCE_VMA:
		case MUL:
		case MUL_NOP:
		case MULH:
		case MULH_NOP:
		case MULHSU:
		case MULHSU_NOP:
		case MULHU:
		case MULHU_NOP:
		case DIV:
		case DIV_NOP:
		case DIVU:
		case DIVU_NOP:
		case REM:
		case REM_NOP:
		case REMU:
		case REMU_NOP:
		case ADDW:
		case ADDW_NOP:
		case SUBW:
		case SUBW_NOP:
		case SLLW:
		case SLLW_NOP:
		case SRLW:
		case SRLW_NOP:
		case SRAW:
		case SRAW_NOP:
		case MULW:
		case MULW_NOP:
		case DIVW:
		case DIVW_NOP:
		case DIVUW:
		case DIVUW_NOP:
		case REMW:
		case REMW_NOP:
		case REMUW:
		case REMUW_NOP:
		case LR_W:
		case SC_W:
		case AMOSWAP_W:
		case AMOADD_W:
		case AMOXOR_W:
		case AMOAND_W:
		case AMOOR_W:
		case AMOMIN_W:
		case AMOMAX_W:
		case AMOMINU_W:
		case AMOMAXU_W:
		case LR_D:
		case SC_D:
		case AMOSWAP_D:
		case AMOADD_D:
		case AMOXOR_D:
		case AMOAND_D:
		case AMOOR_D:
		case AMOMIN_D:
		case AMOMAX_D:
		case AMOMINU_D:
		case AMOMAXU_D:
		case FADD_S:
		case FSUB_S:
		case FMUL_S:
		case FDIV_S:
		case FSQRT_S:
		case FSGNJ_S:
		case FSGNJN_S:
		case FSGNJX_S:
		case FMIN_S:
		case FMAX_S:
		case FCVT_W_S:
		case FCVT_WU_S:
		case FMV_X_W:
		case FEQ_S:
		case FLT_S:
		case FLE_S:
		case FCLASS_S:
		case FCVT_S_W:
		case FCVT_S_WU:
		case FMV_W_X:
		case FCVT_L_S:
		case FCVT_LU_S:
		case FCVT_S_L:
		case FCVT_S_LU:
		case FADD_D:
		case FSUB_D:
		case FMUL_D:
		case FDIV_D:
		case FSQRT_D:
		case FSGNJ_D:
		case FSGNJN_D:
		case FSGNJX_D:
		case FMIN_D:
		case FMAX_D:
		case FCVT_S_D:
		case FCVT_D_S:
		case FEQ_D:
		case FLT_D:
		case FLE_D:
		case FCLASS_D:
		case FCVT_W_D:
		case FCVT_WU_D:
		case FCVT_D_W:
		case FCVT_D_WU:
		case FCVT_L_D:
		case FCVT_LU_D:
		case FMV_X_D:
		case FCVT_D_L:
		case FCVT_D_LU:
		case FMV_D_X:
		case FADD_H:
		case FSUB_H:
		case FMUL_H:
		case FDIV_H:
		case FSQRT_H:
		case FSGNJ_H:
		case FSGNJN_H:
		case FSGNJX_H:
		case FMIN_H:
		case FMAX_H:
		case FCVT_W_H:
		case FCVT_WU_H:
		case FMV_X_H:
		case FEQ_H:
		case FLT_H:
		case FLE_H:
		case FCLASS_H:
		case FCVT_H_W:
		case FCVT_H_WU:
		case FMV_H_X:
		case FCVT_S_H:
		case FCVT_H_S:
		case FCVT_H_D:
		case FCVT_D_H:
		case FCVT_L_H:
		case FCVT_LU_H:
		case FCVT_H_L:
		case FCVT_H_LU:
		case VSETVL:
			return Type::R;

		case JALR:
		case JR:
		case LB:
		case LH:
		case LW:
		case LD:
		case LBU:
		case LHU:
		case LWU:
		case ADDI:
		case ADDI_NOP:
		case SLTI:
		case SLTI_NOP:
		case SLTIU:
		case SLTIU_NOP:
		case XORI:
		case XORI_NOP:
		case ORI:
		case ORI_NOP:
		case ANDI:
		case ANDI_NOP:
		case ADDIW:
		case ADDIW_NOP:
		case SLLIW:
		case SLLIW_NOP:
		case SRLIW:
		case SRLIW_NOP:
		case SRAIW:
		case SRAIW_NOP:
		case SLLI:
		case SLLI_NOP:
		case SRLI:
		case SRLI_NOP:
		case SRAI:
		case SRAI_NOP:
		case ECALL:
		case EBREAK:
		case WFI:
		case FENCE_I:
		case FENCE:
		case URET:
		case SRET:
		case MRET:
		case CSRRW:
		case CSRRS:
		case CSRRC:
		case CSRRWI:
		case CSRRSI:
		case CSRRCI:
		case FLW:
		case FLD:
		case FLH:
			return Type::I;

		case SB:
		case SH:
		case SW:
		case SD:
		case FSW:
		case FSD:
		case FSH:
			return Type::S;

		case BEQ:
		case BNE:
		case BLT:
		case BGE:
		case BLTU:
		case BGEU:
			return Type::B;

		case LUI:
		case LUI_NOP:
		case AUIPC:
		case AUIPC_NOP:
			return Type::U;

		case JAL:
		case J:
			return Type::J;

		case FMADD_S:
		case FMSUB_S:
		case FNMSUB_S:
		case FNMADD_S:
		case FMADD_D:
		case FMSUB_D:
		case FNMSUB_D:
		case FNMADD_D:
		case FMADD_H:
		case FMSUB_H:
		case FNMSUB_H:
		case FNMADD_H:
			return Type::R4;

		case VSETVLI:
		case VSETIVLI:
			return Type::V_SET_I;

		case VLM_V:
		case VSM_V:
		case VLE8_V:
		case VLE16_V:
		case VLE32_V:
		case VLE64_V:
		case VSE8_V:
		case VSE16_V:
		case VSE32_V:
		case VSE64_V:
		case VLSE8_V:
		case VLSE16_V:
		case VLSE32_V:
		case VLSE64_V:
		case VSSE8_V:
		case VSSE16_V:
		case VSSE32_V:
		case VSSE64_V:
		case VLUXEI8_V:
		case VLUXEI16_V:
		case VLUXEI32_V:
		case VLUXEI64_V:
		case VLOXEI8_V:
		case VLOXEI16_V:
		case VLOXEI32_V:
		case VLOXEI64_V:
		case VSUXEI8_V:
		case VSUXEI16_V:
		case VSUXEI32_V:
		case VSUXEI64_V:
		case VSOXEI8_V:
		case VSOXEI16_V:
		case VSOXEI32_V:
		case VSOXEI64_V:
		case VLE8FF_V:
		case VLE16FF_V:
		case VLE32FF_V:
		case VLE64FF_V:
		case VLSEG2E8_V:
		case VLSEG2E16_V:
		case VLSEG2E32_V:
		case VLSEG2E64_V:
		case VSSEG2E8_V:
		case VSSEG2E16_V:
		case VSSEG2E32_V:
		case VSSEG2E64_V:
		case VLSSEG2E8_V:
		case VLSSEG2E16_V:
		case VLSSEG2E32_V:
		case VLSSEG2E64_V:
		case VSSSEG2E8_V:
		case VSSSEG2E16_V:
		case VSSSEG2E32_V:
		case VSSSEG2E64_V:
		case VLUXSEG2EI8_V:
		case VLUXSEG2EI16_V:
		case VLUXSEG2EI32_V:
		case VLUXSEG2EI64_V:
		case VLOXSEG2EI8_V:
		case VLOXSEG2EI16_V:
		case VLOXSEG2EI32_V:
		case VLOXSEG2EI64_V:
		case VSUXSEG2EI8_V:
		case VSUXSEG2EI16_V:
		case VSUXSEG2EI32_V:
		case VSUXSEG2EI64_V:
		case VSOXSEG2EI8_V:
		case VSOXSEG2EI16_V:
		case VSOXSEG2EI32_V:
		case VSOXSEG2EI64_V:
		case VLSEG2E8FF_V:
		case VLSEG2E16FF_V:
		case VLSEG2E32FF_V:
		case VLSEG2E64FF_V:
		case VLSEG3E8_V:
		case VLSEG3E16_V:
		case VLSEG3E32_V:
		case VLSEG3E64_V:
		case VSSEG3E8_V:
		case VSSEG3E16_V:
		case VSSEG3E32_V:
		case VSSEG3E64_V:
		case VLSSEG3E8_V:
		case VLSSEG3E16_V:
		case VLSSEG3E32_V:
		case VLSSEG3E64_V:
		case VSSSEG3E8_V:
		case VSSSEG3E16_V:
		case VSSSEG3E32_V:
		case VSSSEG3E64_V:
		case VLUXSEG3EI8_V:
		case VLUXSEG3EI16_V:
		case VLUXSEG3EI32_V:
		case VLUXSEG3EI64_V:
		case VLOXSEG3EI8_V:
		case VLOXSEG3EI16_V:
		case VLOXSEG3EI32_V:
		case VLOXSEG3EI64_V:
		case VSUXSEG3EI8_V:
		case VSUXSEG3EI16_V:
		case VSUXSEG3EI32_V:
		case VSUXSEG3EI64_V:
		case VSOXSEG3EI8_V:
		case VSOXSEG3EI16_V:
		case VSOXSEG3EI32_V:
		case VSOXSEG3EI64_V:
		case VLSEG3E8FF_V:
		case VLSEG3E16FF_V:
		case VLSEG3E32FF_V:
		case VLSEG3E64FF_V:
		case VLSEG4E8_V:
		case VLSEG4E16_V:
		case VLSEG4E32_V:
		case VLSEG4E64_V:
		case VSSEG4E8_V:
		case VSSEG4E16_V:
		case VSSEG4E32_V:
		case VSSEG4E64_V:
		case VLSSEG4E8_V:
		case VLSSEG4E16_V:
		case VLSSEG4E32_V:
		case VLSSEG4E64_V:
		case VSSSEG4E8_V:
		case VSSSEG4E16_V:
		case VSSSEG4E32_V:
		case VSSSEG4E64_V:
		case VLUXSEG4EI8_V:
		case VLUXSEG4EI16_V:
		case VLUXSEG4EI32_V:
		case VLUXSEG4EI64_V:
		case VLOXSEG4EI8_V:
		case VLOXSEG4EI16_V:
		case VLOXSEG4EI32_V:
		case VLOXSEG4EI64_V:
		case VSUXSEG4EI8_V:
		case VSUXSEG4EI16_V:
		case VSUXSEG4EI32_V:
		case VSUXSEG4EI64_V:
		case VSOXSEG4EI8_V:
		case VSOXSEG4EI16_V:
		case VSOXSEG4EI32_V:
		case VSOXSEG4EI64_V:
		case VLSEG4E8FF_V:
		case VLSEG4E16FF_V:
		case VLSEG4E32FF_V:
		case VLSEG4E64FF_V:
		case VLSEG5E8_V:
		case VLSEG5E16_V:
		case VLSEG5E32_V:
		case VLSEG5E64_V:
		case VSSEG5E8_V:
		case VSSEG5E16_V:
		case VSSEG5E32_V:
		case VSSEG5E64_V:
		case VLSSEG5E8_V:
		case VLSSEG5E16_V:
		case VLSSEG5E32_V:
		case VLSSEG5E64_V:
		case VSSSEG5E8_V:
		case VSSSEG5E16_V:
		case VSSSEG5E32_V:
		case VSSSEG5E64_V:
		case VLUXSEG5EI8_V:
		case VLUXSEG5EI16_V:
		case VLUXSEG5EI32_V:
		case VLUXSEG5EI64_V:
		case VLOXSEG5EI8_V:
		case VLOXSEG5EI16_V:
		case VLOXSEG5EI32_V:
		case VLOXSEG5EI64_V:
		case VSUXSEG5EI8_V:
		case VSUXSEG5EI16_V:
		case VSUXSEG5EI32_V:
		case VSUXSEG5EI64_V:
		case VSOXSEG5EI8_V:
		case VSOXSEG5EI16_V:
		case VSOXSEG5EI32_V:
		case VSOXSEG5EI64_V:
		case VLSEG5E8FF_V:
		case VLSEG5E16FF_V:
		case VLSEG5E32FF_V:
		case VLSEG5E64FF_V:
		case VLSEG6E8_V:
		case VLSEG6E16_V:
		case VLSEG6E32_V:
		case VLSEG6E64_V:
		case VSSEG6E8_V:
		case VSSEG6E16_V:
		case VSSEG6E32_V:
		case VSSEG6E64_V:
		case VLSSEG6E8_V:
		case VLSSEG6E16_V:
		case VLSSEG6E32_V:
		case VLSSEG6E64_V:
		case VSSSEG6E8_V:
		case VSSSEG6E16_V:
		case VSSSEG6E32_V:
		case VSSSEG6E64_V:
		case VLUXSEG6EI8_V:
		case VLUXSEG6EI16_V:
		case VLUXSEG6EI32_V:
		case VLUXSEG6EI64_V:
		case VLOXSEG6EI8_V:
		case VLOXSEG6EI16_V:
		case VLOXSEG6EI32_V:
		case VLOXSEG6EI64_V:
		case VSUXSEG6EI8_V:
		case VSUXSEG6EI16_V:
		case VSUXSEG6EI32_V:
		case VSUXSEG6EI64_V:
		case VSOXSEG6EI8_V:
		case VSOXSEG6EI16_V:
		case VSOXSEG6EI32_V:
		case VSOXSEG6EI64_V:
		case VLSEG6E8FF_V:
		case VLSEG6E16FF_V:
		case VLSEG6E32FF_V:
		case VLSEG6E64FF_V:
		case VLSEG7E8_V:
		case VLSEG7E16_V:
		case VLSEG7E32_V:
		case VLSEG7E64_V:
		case VSSEG7E8_V:
		case VSSEG7E16_V:
		case VSSEG7E32_V:
		case VSSEG7E64_V:
		case VLSSEG7E8_V:
		case VLSSEG7E16_V:
		case VLSSEG7E32_V:
		case VLSSEG7E64_V:
		case VSSSEG7E8_V:
		case VSSSEG7E16_V:
		case VSSSEG7E32_V:
		case VSSSEG7E64_V:
		case VLUXSEG7EI8_V:
		case VLUXSEG7EI16_V:
		case VLUXSEG7EI32_V:
		case VLUXSEG7EI64_V:
		case VLOXSEG7EI8_V:
		case VLOXSEG7EI16_V:
		case VLOXSEG7EI32_V:
		case VLOXSEG7EI64_V:
		case VSUXSEG7EI8_V:
		case VSUXSEG7EI16_V:
		case VSUXSEG7EI32_V:
		case VSUXSEG7EI64_V:
		case VSOXSEG7EI8_V:
		case VSOXSEG7EI16_V:
		case VSOXSEG7EI32_V:
		case VSOXSEG7EI64_V:
		case VLSEG7E8FF_V:
		case VLSEG7E16FF_V:
		case VLSEG7E32FF_V:
		case VLSEG7E64FF_V:
		case VLSEG8E8_V:
		case VLSEG8E16_V:
		case VLSEG8E32_V:
		case VLSEG8E64_V:
		case VSSEG8E8_V:
		case VSSEG8E16_V:
		case VSSEG8E32_V:
		case VSSEG8E64_V:
		case VLSSEG8E8_V:
		case VLSSEG8E16_V:
		case VLSSEG8E32_V:
		case VLSSEG8E64_V:
		case VSSSEG8E8_V:
		case VSSSEG8E16_V:
		case VSSSEG8E32_V:
		case VSSSEG8E64_V:
		case VLUXSEG8EI8_V:
		case VLUXSEG8EI16_V:
		case VLUXSEG8EI32_V:
		case VLUXSEG8EI64_V:
		case VLOXSEG8EI8_V:
		case VLOXSEG8EI16_V:
		case VLOXSEG8EI32_V:
		case VLOXSEG8EI64_V:
		case VSUXSEG8EI8_V:
		case VSUXSEG8EI16_V:
		case VSUXSEG8EI32_V:
		case VSUXSEG8EI64_V:
		case VSOXSEG8EI8_V:
		case VSOXSEG8EI16_V:
		case VSOXSEG8EI32_V:
		case VSOXSEG8EI64_V:
		case VLSEG8E8FF_V:
		case VLSEG8E16FF_V:
		case VLSEG8E32FF_V:
		case VLSEG8E64FF_V:
		case VL1RE8_V:
		case VL1RE16_V:
		case VL1RE32_V:
		case VL1RE64_V:
		case VS1R_V:
		case VL2RE8_V:
		case VL2RE16_V:
		case VL2RE32_V:
		case VL2RE64_V:
		case VS2R_V:
		case VL4RE8_V:
		case VL4RE16_V:
		case VL4RE32_V:
		case VL4RE64_V:
		case VS4R_V:
		case VL8RE8_V:
		case VL8RE16_V:
		case VL8RE32_V:
		case VL8RE64_V:
		case VS8R_V:
			return Type::V_LS;

		case VADD_VV:
		case VADD_VI:
		case VADD_VX:
		case VSUB_VV:
		case VSUB_VX:
		case VRSUB_VX:
		case VRSUB_VI:
		case VWADD_VV:
		case VWADD_VX:
		case VWSUB_VV:
		case VWSUB_VX:
		case VWADDU_VV:
		case VWADDU_VX:
		case VWSUBU_VV:
		case VWSUBU_VX:
		case VWADD_WV:
		case VWADD_WX:
		case VWSUB_WV:
		case VWSUB_WX:
		case VWADDU_WV:
		case VWADDU_WX:
		case VWSUBU_WV:
		case VWSUBU_WX:
		case VZEXT_VF2:
		case VSEXT_VF2:
		case VZEXT_VF4:
		case VSEXT_VF4:
		case VZEXT_VF8:
		case VSEXT_VF8:
		case VADC_VVM:
		case VADC_VXM:
		case VADC_VIM:
		case VMADC_VVM:
		case VMADC_VXM:
		case VMADC_VIM:
		case VMADC_VV:
		case VMADC_VX:
		case VMADC_VI:
		case VSBC_VVM:
		case VSBC_VXM:
		case VMSBC_VVM:
		case VMSBC_VXM:
		case VMSBC_VV:
		case VMSBC_VX:
		case VAND_VI:
		case VAND_VV:
		case VAND_VX:
		case VOR_VV:
		case VOR_VI:
		case VOR_VX:
		case VXOR_VV:
		case VXOR_VI:
		case VXOR_VX:
		case VSLL_VI:
		case VSLL_VV:
		case VSLL_VX:
		case VSRL_VV:
		case VSRL_VI:
		case VSRL_VX:
		case VSRA_VV:
		case VSRA_VI:
		case VSRA_VX:
		case VNSRL_WV:
		case VNSRL_WI:
		case VNSRL_WX:
		case VNSRA_WV:
		case VNSRA_WI:
		case VNSRA_WX:
		case VMSEQ_VV:
		case VMSEQ_VX:
		case VMSEQ_VI:
		case VMSNE_VV:
		case VMSNE_VX:
		case VMSNE_VI:
		case VMSLTU_VV:
		case VMSLTU_VX:
		case VMSLT_VV:
		case VMSLT_VX:
		case VMSLEU_VV:
		case VMSLEU_VX:
		case VMSLEU_VI:
		case VMSLE_VV:
		case VMSLE_VX:
		case VMSLE_VI:
		case VMSGTU_VX:
		case VMSGTU_VI:
		case VMSGT_VX:
		case VMSGT_VI:
		case VMINU_VV:
		case VMINU_VX:
		case VMIN_VV:
		case VMIN_VX:
		case VMAXU_VV:
		case VMAXU_VX:
		case VMAX_VV:
		case VMAX_VX:
		case VMUL_VV:
		case VMUL_VX:
		case VMULH_VV:
		case VMULH_VX:
		case VMULHU_VV:
		case VMULHU_VX:
		case VMULHSU_VV:
		case VMULHSU_VX:
		case VDIVU_VV:
		case VDIVU_VX:
		case VDIV_VV:
		case VDIV_VX:
		case VREMU_VV:
		case VREMU_VX:
		case VREM_VV:
		case VREM_VX:
		case VWMUL_VV:
		case VWMUL_VX:
		case VWMULU_VV:
		case VWMULU_VX:
		case VWMULSU_VV:
		case VWMULSU_VX:
		case VMACC_VV:
		case VMACC_VX:
		case VNMSAC_VV:
		case VNMSAC_VX:
		case VMADD_VV:
		case VMADD_VX:
		case VNMSUB_VV:
		case VNMSUB_VX:
		case VWMACCU_VV:
		case VWMACCU_VX:
		case VWMACC_VV:
		case VWMACC_VX:
		case VWMACCSU_VV:
		case VWMACCSU_VX:
		case VWMACCUS_VX:
		case VMERGE_VVM:
		case VMERGE_VXM:
		case VMERGE_VIM:
		case VMV_V_V:
		case VMV_V_X:
		case VMV_V_I:
		case VSADDU_VV:
		case VSADDU_VX:
		case VSADDU_VI:
		case VSADD_VV:
		case VSADD_VX:
		case VSADD_VI:
		case VSSUBU_VV:
		case VSSUBU_VX:
		case VSSUB_VV:
		case VSSUB_VX:
		case VAADDU_VV:
		case VAADDU_VX:
		case VAADD_VV:
		case VAADD_VX:
		case VASUBU_VV:
		case VASUBU_VX:
		case VASUB_VV:
		case VASUB_VX:
		case VSMUL_VV:
		case VSMUL_VX:
		case VSSRL_VV:
		case VSSRL_VX:
		case VSSRL_VI:
		case VSSRA_VV:
		case VSSRA_VX:
		case VSSRA_VI:
		case VNCLIPU_WV:
		case VNCLIPU_WX:
		case VNCLIPU_WI:
		case VNCLIP_WV:
		case VNCLIP_WX:
		case VNCLIP_WI:
		case VFADD_VV:
		case VFADD_VF:
		case VFSUB_VV:
		case VFSUB_VF:
		case VFRSUB_VF:
		case VFWADD_VV:
		case VFWADD_VF:
		case VFWSUB_VV:
		case VFWSUB_VF:
		case VFWADD_WV:
		case VFWADD_WF:
		case VFWSUB_WV:
		case VFWSUB_WF:
		case VFMUL_VV:
		case VFMUL_VF:
		case VFDIV_VV:
		case VFDIV_VF:
		case VFRDIV_VF:
		case VFWMUL_VV:
		case VFWMUL_VF:
		case VFMACC_VV:
		case VFMACC_VF:
		case VFNMACC_VV:
		case VFNMACC_VF:
		case VFMSAC_VV:
		case VFMSAC_VF:
		case VFNMSAC_VV:
		case VFNMSAC_VF:
		case VFMADD_VV:
		case VFMADD_VF:
		case VFNMADD_VV:
		case VFNMADD_VF:
		case VFMSUB_VV:
		case VFMSUB_VF:
		case VFNMSUB_VV:
		case VFNMSUB_VF:
		case VFWMACC_VV:
		case VFWMACC_VF:
		case VFWNMACC_VV:
		case VFWNMACC_VF:
		case VFWMSAC_VV:
		case VFWMSAC_VF:
		case VFWNMSAC_VV:
		case VFWNMSAC_VF:
		case VFSQRT_V:
		case VFRSQRT7_V:
		case VFREC7_V:
		case VFMIN_VV:
		case VFMIN_VF:
		case VFMAX_VV:
		case VFMAX_VF:
		case VFSGNJ_VV:
		case VFSGNJ_VF:
		case VFSGNJN_VV:
		case VFSGNJN_VF:
		case VFSGNJX_VV:
		case VFSGNJX_VF:
		case VMFEQ_VV:
		case VMFEQ_VF:
		case VMFNE_VV:
		case VMFNE_VF:
		case VMFLT_VV:
		case VMFLT_VF:
		case VMFLE_VV:
		case VMFLE_VF:
		case VMFGT_VF:
		case VMFGE_VF:
		case VFCLASS_V:
		case VFMERGE_VFM:
		case VFMV_V_F:
		case VFCVT_XU_F_V:
		case VFCVT_X_F_V:
		case VFCVT_RTZ_XU_F_V:
		case VFCVT_RTZ_X_F_V:
		case VFCVT_F_XU_V:
		case VFCVT_F_X_V:
		case VFWCVT_XU_F_V:
		case VFWCVT_X_F_V:
		case VFWCVT_RTZ_XU_F_V:
		case VFWCVT_RTZ_X_F_V:
		case VFWCVT_F_XU_V:
		case VFWCVT_F_X_V:
		case VFWCVT_F_F_V:
		case VFNCVT_XU_F_W:
		case VFNCVT_X_F_W:
		case VFNCVT_RTZ_XU_F_W:
		case VFNCVT_RTZ_X_F_W:
		case VFNCVT_F_XU_W:
		case VFNCVT_F_X_W:
		case VFNCVT_F_F_W:
		case VFNCVT_ROD_F_F_W:
		case VREDSUM_VS:
		case VREDMAXU_VS:
		case VREDMAX_VS:
		case VREDMINU_VS:
		case VREDMIN_VS:
		case VREDAND_VS:
		case VREDOR_VS:
		case VREDXOR_VS:
		case VWREDSUMU_VS:
		case VWREDSUM_VS:
		case VFREDUSUM_VS:
		case VFREDOSUM_VS:
		case VFREDMAX_VS:
		case VFREDMIN_VS:
		case VFWREDUSUM_VS:
		case VFWREDOSUM_VS:
		case VMAND_MM:
		case VMNAND_MM:
		case VMANDN_MM:
		case VMXOR_MM:
		case VMOR_MM:
		case VMNOR_MM:
		case VMORN_MM:
		case VMXNOR_MM:
		case VCPOP_M:
		case VFIRST_M:
		case VMSBF_M:
		case VMSIF_M:
		case VMSOF_M:
		case VIOTA_M:
		case VID_V:
		case VMV_X_S:
		case VMV_S_X:
		case VFMV_F_S:
		case VFMV_S_F:
		case VSLIDEUP_VX:
		case VSLIDEUP_VI:
		case VSLIDEDOWN_VX:
		case VSLIDEDOWN_VI:
		case VSLIDE1UP_VX:
		case VFSLIDE1UP_VF:
		case VSLIDE1DOWN_VX:
		case VFSLIDE1DOWN_VF:
		case VRGATHER_VV:
		case VRGATHEREI16_VV:
		case VRGATHER_VX:
		case VRGATHER_VI:
		case VCOMPRESS_VM:
		case VMV_NR_R_V:
			return Type::V;

		case UNDEF:
		case UNSUP:
		case NUMBER_OF_INSTRUCTIONS:
			return Type::UNKNOWN;

			/* no default branch here -> we want compiler warnings in this case! */
	}
	return Type::UNKNOWN;
}

unsigned C_ADDI4SPN_NZUIMM(uint32_t n) {
	return (BIT_SLICE(n, 12, 11) << 4) | (BIT_SLICE(n, 10, 7) << 6) | (BIT_SINGLE_P1(n, 6) << 2) |
	       (BIT_SINGLE_P1(n, 5) << 3);
}

unsigned C_LW_UIMM(uint32_t n) {
	return (BIT_SLICE(n, 12, 10) << 3) | (BIT_SINGLE_P1(n, 6) << 2) | (BIT_SINGLE_P1(n, 5) << 6);
}

unsigned C_LD_UIMM(uint32_t n) {
	return (BIT_SLICE(n, 12, 10) << 3) | (BIT_SLICE(n, 6, 5) << 6);
}

unsigned C_SW_UIMM(uint32_t n) {
	return C_LW_UIMM(n);
}

unsigned C_SD_UIMM(uint32_t n) {
	return C_LD_UIMM(n);
}

int32_t C_JAL_IMM(int32_t n) {
	return EXTRACT_SIGN_BIT(n, 12, 11) | BIT_SINGLE_PN(n, 11, 4) | (BIT_SLICE(n, 10, 9) << 8) |
	       BIT_SINGLE_PN(n, 8, 10) | BIT_SINGLE_PN(n, 7, 6) | BIT_SINGLE_PN(n, 6, 7) | (BIT_SLICE(n, 5, 3) << 1) |
	       BIT_SINGLE_PN(n, 2, 5);
}

int32_t C_ADDI16SP_NZIMM(int32_t n) {
	return EXTRACT_SIGN_BIT(n, 12, 9) | BIT_SINGLE_PN(n, 6, 4) | BIT_SINGLE_PN(n, 5, 6) | (BIT_SLICE(n, 4, 3) << 7) |
	       BIT_SINGLE_PN(n, 2, 5);
}

int32_t C_LUI_NZIMM(int32_t n) {
	return EXTRACT_SIGN_BIT(n, 12, 17) | (BIT_SLICE(n, 6, 2) << 12);
}

int32_t C_J_IMM(int32_t n) {
	return C_JAL_IMM(n);
}

int32_t C_BRANCH_IMM(int32_t n) {
	return EXTRACT_SIGN_BIT(n, 12, 8) | (BIT_SLICE(n, 11, 10) << 3) | (BIT_SLICE(n, 6, 5) << 6) |
	       (BIT_SLICE(n, 4, 3) << 1) | BIT_SINGLE_PN(n, 2, 5);
}

uint32_t C_LWSP_UIMM(uint32_t n) {
	return BIT_SINGLE_PN(n, 12, 5) | (BIT_SLICE(n, 6, 4) << 2) | (BIT_SLICE(n, 3, 2) << 6);
}

uint32_t C_SWSP_UIMM(uint32_t n) {
	return (BIT_SLICE(n, 12, 9) << 2) | (BIT_SLICE(n, 8, 7) << 6);
}

uint32_t C_LDSP_UIMM(uint32_t n) {
	return BIT_SINGLE_PN(n, 12, 5) | (BIT_SLICE(n, 6, 5) << 3) | (BIT_SLICE(n, 4, 2) << 6);
}

uint32_t C_SDSP_UIMM(uint32_t n) {
	return (BIT_SLICE(n, 12, 10) << 3) | (BIT_SLICE(n, 9, 7) << 6);
}

struct InstructionFactory {
	typedef Instruction T;

	static T ADD(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 51 | (0 << 12) | (0 << 25));
	}

	static T AND(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 51 | (7 << 12) | (0 << 25));
	}

	static T OR(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 51 | (6 << 12) | (0 << 25));
	}

	static T XOR(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 51 | (4 << 12) | (0 << 25));
	}

	static T SUB(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 51 | (0 << 12) | (32 << 25));
	}

	static T LW(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 3 | (2 << 12));
	}

	static T LD(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 3 | (3 << 12));
	}

	static T FLW(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 7 | (2 << 12));
	}

	static T FLD(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 7 | (3 << 12));
	}

	static T SW(unsigned rs1, unsigned rs2, int S_imm) {
		return T((((S_imm & 0b11111) << 7) | ((S_imm & (0b1111111 << 5)) << 20)) | ((rs1 & 0x1f) << 15) |
		         ((rs2 & 0x1f) << 20) | 35 | (2 << 12));
	}

	static T SD(unsigned rs1, unsigned rs2, int S_imm) {
		return T((((S_imm & 0b11111) << 7) | ((S_imm & (0b1111111 << 5)) << 20)) | ((rs1 & 0x1f) << 15) |
		         ((rs2 & 0x1f) << 20) | 35 | (3 << 12));
	}

	static T FSW(unsigned rs1, unsigned rs2, int S_imm) {
		return T((((S_imm & 0b11111) << 7) | ((S_imm & (0b1111111 << 5)) << 20)) | ((rs1 & 0x1f) << 15) |
		         ((rs2 & 0x1f) << 20) | 39 | (2 << 12));
	}

	static T FSD(unsigned rs1, unsigned rs2, int S_imm) {
		return T((((S_imm & 0b11111) << 7) | ((S_imm & (0b1111111 << 5)) << 20)) | ((rs1 & 0x1f) << 15) |
		         ((rs2 & 0x1f) << 20) | 39 | (3 << 12));
	}

	static T LUI(unsigned rd, int U_imm) {
		return T((U_imm & (1048575 << 12)) | ((rd & 0x1f) << 7) | 55);
	}

	static T ADDI(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 19 | (0 << 12));
	}

	static T ANDI(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 19 | (7 << 12));
	}

	static T SRLI(unsigned rd, unsigned rs1, unsigned shamt) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((shamt & 63) << 20) | 19 | (5 << 12) | (0 << 25));
	}

	static T SRAI(unsigned rd, unsigned rs1, unsigned shamt) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((shamt & 63) << 20) | 19 | (5 << 12) | (32 << 25));
	}

	static T SLLI(unsigned rd, unsigned rs1, unsigned shamt) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((shamt & 63) << 20) | 19 | (1 << 12) | (0 << 25));
	}

	static T JAL(unsigned rd, int J_imm) {
		return T(111 | ((rd & 0x1f) << 7) |
		         ((J_imm & (0b11111111 << 12)) | ((J_imm & (1 << 11)) << 9) | ((J_imm & 0b11111111110) << 20) |
		          ((J_imm & (1 << 20)) << 11)));
	}

	static T JALR(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 103 | (0 << 12));
	}

	static T BEQ(unsigned rs1, unsigned rs2, int B_imm) {
		return T(((((B_imm & 0b11110) << 7) | ((B_imm & (1 << 11)) >> 4)) |
		          (((B_imm & (0b111111 << 5)) << 20) | ((B_imm & (1 << 12)) << 19))) |
		         ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 99 | (0 << 12));
	}

	static T BNE(unsigned rs1, unsigned rs2, int B_imm) {
		return T(((((B_imm & 0b11110) << 7) | ((B_imm & (1 << 11)) >> 4)) |
		          (((B_imm & (0b111111 << 5)) << 20) | ((B_imm & (1 << 12)) << 19))) |
		         ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 99 | (1 << 12));
	}

	static T EBREAK() {
		return T(1048691);
	}

	static T ADDIW(unsigned rd, unsigned rs1, int I_imm) {
		return T(((I_imm & 4095) << 20) | ((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | 0x1b);
	}

	static T ADDW(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 0x3b);
	}

	static T SUBW(unsigned rd, unsigned rs1, unsigned rs2) {
		return T(((rd & 0x1f) << 7) | ((rs1 & 0x1f) << 15) | ((rs2 & 0x1f) << 20) | 0x3b | 0x40000000);
	}
};

Compressed::Opcode decode_compressed(Instruction &instr, Architecture arch) {
	using namespace Compressed;

	switch (instr.quadrant()) {
		case 0:
			switch (instr.c_opcode()) {
				case 0b000:
					if (instr.c_format() == 0)
						return C_Illegal;
					else
						return C_ADDI4SPN;

				case 0b001:
					return C_FLD;

				case 0b010:
					return C_LW;

				case 0b011:
					if (arch == RV32)
						return C_FLW;
					else
						return C_LD;

				case 0b100:
					return C_Reserved;

				case 0b101:
					return C_FSD;

				case 0b110:
					return C_SW;

				case 0b111:
					if (arch == RV32)
						return C_FSW;
					else
						return C_SD;
			}
			break;

		case 1:
			switch (instr.c_opcode()) {
				case 0b000:
					if (instr.c_format() == 1)
						return C_NOP;
					else
						return C_ADDI;

				case 0b001:
					if (arch == RV32)
						return C_JAL;
					else
						return C_ADDIW;

				case 0b010:
					return C_LI;

				case 0b011:
					if (instr.c_rd() == 2)
						return C_ADDI16SP;
					else
						return C_LUI;

				case 0b100:
					switch (instr.c_f2_high()) {
						case 0b00:
							return C_SRLI;

						case 0b01:
							return C_SRAI;

						case 0b10:
							return C_ANDI;

						case 0b11:
							if (instr.c_b12()) {
								switch (instr.c_f2_low()) {
									case 0b00:
										return C_SUBW;
									case 0b01:
										return C_ADDW;
								}
								return C_Reserved;
							} else {
								switch (instr.c_f2_low()) {
									case 0b00:
										return C_SUB;
									case 0b01:
										return C_XOR;
									case 0b10:
										return C_OR;
									case 0b11:
										return C_AND;
								}
							}
					}
					break;

				case 0b101:
					return C_J;

				case 0b110:
					return C_BEQZ;

				case 0b111:
					return C_BNEZ;
			}
			break;

		case 2:
			switch (instr.c_opcode()) {
				case 0b000:
					return C_SLLI;

				case 0b001:
					return C_FLDSP;

				case 0b010:
					return C_LWSP;

				case 0b011:
					if (arch == RV32)
						return C_FLWSP;
					else
						return C_LDSP;

				case 0b100:
					if (instr.c_b12()) {
						if (instr.c_rd()) {
							if (instr.c_rs2()) {
								return C_ADD;
							} else {
								return C_JALR;
							}
						} else {
							return C_EBREAK;
						}
					} else {
						if (instr.c_rs2()) {
							return C_MV;
						} else {
							return C_JR;
						}
					}

				case 0b101:
					return C_FSDSP;

				case 0b110:
					return C_SWSP;

				case 0b111:
					if (arch == RV32)
						return C_FSWSP;
					else
						return C_SDSP;
			}
			break;

		case 3:
			throw std::runtime_error("compressed instruction expected, but uncompressed found");
	}

	// undefined/unsupported instruction
	return C_Illegal;
}

/* get either the real operation _op (e.g. ADD) or, if rd == zero, _op_NOP (e.g. ADD_NOP) */
#define C_GET_OP_OR_NOP(_instr, _op) ((_instr).rd() != 0 ? (_op) : (_op##_NOP))

Opcode::Mapping expand_compressed(Instruction &instr, Compressed::Opcode op, Architecture arch,
                                  const RV_ISA_Config &isa_config) {
	using namespace Opcode;
	using namespace Compressed;

	switch (op) {
		case C_Illegal:
			return UNDEF;

		// RV128 currently not supported
		case C_LQ:
		case C_LQSP:
		case C_SQ:
		case C_SQSP:
			return UNDEF;

		case C_Reserved:
			return UNDEF;  // reserved instructions should raise an illegal instruction exception

		case C_NOP:
			instr = InstructionFactory::ADD(0, 0, 0);
			return ADD_NOP;

		case C_ADD:
			instr = InstructionFactory::ADD(instr.c_rd(), instr.c_rd(), instr.c_rs2());
			return C_GET_OP_OR_NOP(instr, ADD);

		case C_MV:
			instr = InstructionFactory::ADD(instr.c_rd(), 0, instr.c_rs2());
			return C_GET_OP_OR_NOP(instr, ADD);

		case C_AND:
			instr = InstructionFactory::AND(instr.c_rd_small(), instr.c_rd_small(), instr.c_rs2_small());
			return C_GET_OP_OR_NOP(instr, AND);

		case C_OR:
			instr = InstructionFactory::OR(instr.c_rd_small(), instr.c_rd_small(), instr.c_rs2_small());
			return C_GET_OP_OR_NOP(instr, OR);

		case C_XOR:
			instr = InstructionFactory::XOR(instr.c_rd_small(), instr.c_rd_small(), instr.c_rs2_small());
			return C_GET_OP_OR_NOP(instr, XOR);

		case C_SUB:
			instr = InstructionFactory::SUB(instr.c_rd_small(), instr.c_rd_small(), instr.c_rs2_small());
			return C_GET_OP_OR_NOP(instr, SUB);

		case C_ADDW:
			instr = InstructionFactory::ADDW(instr.c_rd_small(), instr.c_rd_small(), instr.c_rs2_small());
			return C_GET_OP_OR_NOP(instr, ADDW);

		case C_SUBW:
			instr = InstructionFactory::SUBW(instr.c_rd_small(), instr.c_rd_small(), instr.c_rs2_small());
			return C_GET_OP_OR_NOP(instr, SUBW);

		case C_LW:
			instr = InstructionFactory::LW(instr.c_rs2_small(), instr.c_rd_small(), C_LW_UIMM(instr.data()));
			return LW;

		case C_LD:
			instr = InstructionFactory::LD(instr.c_rs2_small(), instr.c_rd_small(), C_LD_UIMM(instr.data()));
			return LD;

		case C_FLW:
			REQUIRE_ISA(csr_misa::F);
			instr = InstructionFactory::FLW(instr.c_rs2_small(), instr.c_rd_small(), C_LW_UIMM(instr.data()));
			return FLW;

		case C_FLD:
			REQUIRE_ISA(csr_misa::D);
			instr = InstructionFactory::FLD(instr.c_rs2_small(), instr.c_rd_small(), C_LD_UIMM(instr.data()));
			return FLD;

		case C_SW:
			instr = InstructionFactory::SW(instr.c_rd_small(), instr.c_rs2_small(), C_SW_UIMM(instr.data()));
			return SW;

		case C_SD:
			instr = InstructionFactory::SD(instr.c_rd_small(), instr.c_rs2_small(), C_SD_UIMM(instr.data()));
			return SD;

		case C_FSW:
			REQUIRE_ISA(csr_misa::F);
			instr = InstructionFactory::FSW(instr.c_rd_small(), instr.c_rs2_small(), C_SW_UIMM(instr.data()));
			return FSW;

		case C_FSD:
			REQUIRE_ISA(csr_misa::D);
			instr = InstructionFactory::FSD(instr.c_rd_small(), instr.c_rs2_small(), C_SD_UIMM(instr.data()));
			return FSD;

		case C_ADDI4SPN: {
			unsigned n = C_ADDI4SPN_NZUIMM(instr.data());
			if (n == 0)
				return UNDEF;
			instr = InstructionFactory::ADDI(instr.c_rs2_small(), 2, n);
			return C_GET_OP_OR_NOP(instr, ADDI);
		}

		case C_ADDI:
			instr = InstructionFactory::ADDI(instr.c_rd(), instr.c_rd(), instr.c_imm());
			return C_GET_OP_OR_NOP(instr, ADDI);

		case C_JAL:
			instr = InstructionFactory::JAL(1, C_JAL_IMM(instr.data()));
			return JAL;

		case C_ADDIW:
			if (instr.c_rd() == 0)
				return UNDEF;  // reserved
			instr = InstructionFactory::ADDIW(instr.c_rd(), instr.c_rd(), instr.c_imm());
			return C_GET_OP_OR_NOP(instr, ADDIW);

		case C_LI:
			instr = InstructionFactory::ADDI(instr.c_rd(), 0, instr.c_imm());
			return C_GET_OP_OR_NOP(instr, ADDI);

		case C_ADDI16SP: {
			auto n = C_ADDI16SP_NZIMM(instr.data());
			if (n == 0)
				return UNDEF;  // reserved
			instr = InstructionFactory::ADDI(2, 2, n);
			return C_GET_OP_OR_NOP(instr, ADDI);
		}

		case C_LUI: {
			auto n = C_LUI_NZIMM(instr.data());
			if (n == 0)
				return UNDEF;  // reserved
			instr = InstructionFactory::LUI(instr.c_rd(), n);
			return C_GET_OP_OR_NOP(instr, LUI);
		}

		case C_SLLI: {
			auto n = instr.c_uimm();
			if (arch == RV32 && n > 31)
				return UNDEF;
			instr = InstructionFactory::SLLI(instr.c_rd(), instr.c_rd(), n);
			return C_GET_OP_OR_NOP(instr, SLLI);
		}

		case C_SRLI: {
			auto n = instr.c_uimm();
			if (arch == RV32 && n > 31)
				return UNDEF;
			instr = InstructionFactory::SRLI(instr.c_rd_small(), instr.c_rd_small(), n);
			return C_GET_OP_OR_NOP(instr, SRLI);
		}

		case C_SRAI: {
			auto n = instr.c_uimm();
			if (arch == RV32 && n > 31)
				return UNDEF;
			instr = InstructionFactory::SRAI(instr.c_rd_small(), instr.c_rd_small(), n);
			return C_GET_OP_OR_NOP(instr, SRAI);
		}

		case C_ANDI:
			instr = InstructionFactory::ANDI(instr.c_rd_small(), instr.c_rd_small(), instr.c_imm());
			return C_GET_OP_OR_NOP(instr, ANDI);

		case C_J:
			instr = InstructionFactory::JAL(0, C_J_IMM(instr.data()));
			return J;

		case C_BEQZ:
			instr = InstructionFactory::BEQ(instr.c_rd_small(), 0, C_BRANCH_IMM(instr.data()));
			return BEQ;

		case C_BNEZ:
			instr = InstructionFactory::BNE(instr.c_rd_small(), 0, C_BRANCH_IMM(instr.data()));
			return BNE;

		case C_LWSP:
			if (instr.c_rd() == 0)
				return UNDEF;  // reserved
			instr = InstructionFactory::LW(instr.c_rd(), 2, C_LWSP_UIMM(instr.data()));
			return LW;

		case C_LDSP:
			if (instr.c_rd() == 0)
				return UNDEF;  // reserved
			instr = InstructionFactory::LD(instr.c_rd(), 2, C_LDSP_UIMM(instr.data()));
			return LD;

		case C_FLWSP:
			REQUIRE_ISA(csr_misa::F);
			instr = InstructionFactory::FLW(instr.c_rd(), 2, C_LWSP_UIMM(instr.data()));
			return FLW;

		case C_FLDSP:
			REQUIRE_ISA(csr_misa::D);
			instr = InstructionFactory::FLD(instr.c_rd(), 2, C_LDSP_UIMM(instr.data()));
			return FLD;

		case C_SWSP:
			instr = InstructionFactory::SW(2, instr.c_rs2(), C_SWSP_UIMM(instr.data()));
			return SW;

		case C_SDSP:
			instr = InstructionFactory::SD(2, instr.c_rs2(), C_SDSP_UIMM(instr.data()));
			return SD;

		case C_FSWSP:
			REQUIRE_ISA(csr_misa::F);
			instr = InstructionFactory::FSW(2, instr.c_rs2(), C_SWSP_UIMM(instr.data()));
			return FSW;

		case C_FSDSP:
			REQUIRE_ISA(csr_misa::D);
			instr = InstructionFactory::FSD(2, instr.c_rs2(), C_SDSP_UIMM(instr.data()));
			return FSD;

		case C_EBREAK:
			instr = InstructionFactory::EBREAK();
			return EBREAK;

		case C_JR:
			if (instr.c_rd() == 0)
				return UNDEF;  // reserved
			instr = InstructionFactory::JALR(0, instr.c_rd(), 0);
			return JR;

		case C_JALR:
			instr = InstructionFactory::JALR(1, instr.c_rd(), 0);
			return JALR;
	}

	throw std::runtime_error("some compressed instruction not handled");
}

Opcode::Mapping Instruction::decode_and_expand_compressed(Architecture arch, const RV_ISA_Config &isa_config) {
	REQUIRE_ISA(csr_misa::C);
	auto c_op = decode_compressed(*this, arch);
	return expand_compressed(*this, c_op, arch, isa_config);
}

/* match and return either the real operation _opA (e.g. ADD) or, if rd == zero, the alternative operation _opB (e.g.
 * ADD_NOP) */
#define MATCH_AND_RETURN_INSTR2_OR_OPZERO(_instr, _op, _opzero) \
	MATCH_AND_RETURN_INSTR2(_instr, (instr.rd() != 0 ? (_op) : (_opzero)))

/* match and return either the real operation _op (e.g. ADD) or, if rd == zero, instr_NOP (e.g. ADD_NOP) */
#define MATCH_AND_RETURN_INSTR2_OR_NOP(_instr, _op) MATCH_AND_RETURN_INSTR2_OR_OPZERO(_instr, (_op), (_op##_NOP))

#define MATCH_AND_RETURN_INSTR_OR_OPZERO(_op, _opzero) MATCH_AND_RETURN_INSTR2_OR_OPZERO(_op, _op, _opzero)
#define MATCH_AND_RETURN_INSTR_OR_NOP(_op) MATCH_AND_RETURN_INSTR2_OR_NOP(_op, _op)

/*
 * TODO: check REQUIRE_MISA for RVV e.g maybe check V and F/D for vector float?
 */
Opcode::Mapping Instruction::decode_normal(Architecture arch, const RV_ISA_Config &isa_config) {
	using namespace Opcode;

	Instruction &instr = *this;

	switch (instr.opcode()) {
		case OP_LUI:
			MATCH_AND_RETURN_INSTR_OR_NOP(LUI);

		case OP_AUIPC:
			MATCH_AND_RETURN_INSTR_OR_NOP(AUIPC);

		case OP_JAL:
			MATCH_AND_RETURN_INSTR_OR_OPZERO(JAL, J);

		case OP_JALR: {
			MATCH_AND_RETURN_INSTR_OR_OPZERO(JALR, JR);
		}

		case OP_BEQ: {
			switch (instr.funct3()) {
				case F3_BEQ:
					MATCH_AND_RETURN_INSTR(BEQ);
				case F3_BNE:
					MATCH_AND_RETURN_INSTR(BNE);
				case F3_BLT:
					MATCH_AND_RETURN_INSTR(BLT);
				case F3_BGE:
					MATCH_AND_RETURN_INSTR(BGE);
				case F3_BLTU:
					MATCH_AND_RETURN_INSTR(BLTU);
				case F3_BGEU:
					MATCH_AND_RETURN_INSTR(BGEU);
			}
			break;
		}

		case OP_LB: {
			switch (instr.funct3()) {
				case F3_LB:
					MATCH_AND_RETURN_INSTR(LB);
				case F3_LH:
					MATCH_AND_RETURN_INSTR(LH);
				case F3_LW:
					MATCH_AND_RETURN_INSTR(LW);
				case F3_LBU:
					MATCH_AND_RETURN_INSTR(LBU);
				case F3_LHU:
					MATCH_AND_RETURN_INSTR(LHU);
				case F3_LWU:
					MATCH_AND_RETURN_INSTR(LWU);
				case F3_LD:
					MATCH_AND_RETURN_INSTR(LD);
			}
			break;
		}

		case OP_SB: {
			switch (instr.funct3()) {
				case F3_SB:
					MATCH_AND_RETURN_INSTR(SB);
				case F3_SH:
					MATCH_AND_RETURN_INSTR(SH);
				case F3_SW:
					MATCH_AND_RETURN_INSTR(SW);
				case F3_SD:
					MATCH_AND_RETURN_INSTR(SD);
			}
			break;
		}

		case OP_ADDI: {
			switch (instr.funct3()) {
				case F3_ADDI:
					MATCH_AND_RETURN_INSTR_OR_NOP(ADDI);
				case F3_SLTI:
					MATCH_AND_RETURN_INSTR_OR_NOP(SLTI);
				case F3_SLTIU:
					MATCH_AND_RETURN_INSTR_OR_NOP(SLTIU);
				case F3_XORI:
					MATCH_AND_RETURN_INSTR_OR_NOP(XORI);
				case F3_ORI:
					MATCH_AND_RETURN_INSTR_OR_NOP(ORI);
				case F3_ANDI:
					MATCH_AND_RETURN_INSTR_OR_NOP(ANDI);
				case F3_SLLI:
					if (arch == RV32) {
						MATCH_AND_RETURN_INSTR2_OR_NOP(SLLI_32, SLLI);
					} else {
						MATCH_AND_RETURN_INSTR_OR_NOP(SLLI);
					}
				case F3_SRLI: {
					switch (instr.funct6()) {
						case F6_SRLI:
							if (arch == RV32) {
								MATCH_AND_RETURN_INSTR2_OR_NOP(SRLI_32, SRLI);
							} else {
								MATCH_AND_RETURN_INSTR_OR_NOP(SRLI);
							}
						case F6_SRAI:
							if (arch == RV32) {
								MATCH_AND_RETURN_INSTR2_OR_NOP(SRAI_32, SRAI);
							} else {
								MATCH_AND_RETURN_INSTR_OR_NOP(SRAI);
							}
					}
				}
			}
			break;
		}

		case OP_ADDIW: {
			switch (instr.funct3()) {
				case F3_ADDIW:
					MATCH_AND_RETURN_INSTR_OR_NOP(ADDIW);
				case F3_SLLIW:
					MATCH_AND_RETURN_INSTR_OR_NOP(SLLIW);
				case F3_SRLIW: {
					switch (instr.funct7()) {
						case F7_SRLIW:
							MATCH_AND_RETURN_INSTR_OR_NOP(SRLIW);
						case F7_SRAIW:
							MATCH_AND_RETURN_INSTR_OR_NOP(SRAIW);
					}
				}
			}
			break;
		}

		case OP_ADD: {
			switch (instr.funct7()) {
				case F7_ADD:
					switch (instr.funct3()) {
						case F3_ADD:
							MATCH_AND_RETURN_INSTR_OR_NOP(ADD);
						case F3_SLL:
							MATCH_AND_RETURN_INSTR_OR_NOP(SLL);
						case F3_SLT:
							MATCH_AND_RETURN_INSTR_OR_NOP(SLT);
						case F3_SLTU:
							MATCH_AND_RETURN_INSTR_OR_NOP(SLTU);
						case F3_XOR:
							MATCH_AND_RETURN_INSTR_OR_NOP(XOR);
						case F3_SRL:
							MATCH_AND_RETURN_INSTR_OR_NOP(SRL);
						case F3_OR:
							MATCH_AND_RETURN_INSTR_OR_NOP(OR);
						case F3_AND:
							MATCH_AND_RETURN_INSTR_OR_NOP(AND);
					}
					break;

				case F7_SUB:
					switch (instr.funct3()) {
						case F3_SUB:
							MATCH_AND_RETURN_INSTR_OR_NOP(SUB);
						case F3_SRA:
							MATCH_AND_RETURN_INSTR_OR_NOP(SRA);
					}
					break;

				case F7_MUL:
					switch (instr.funct3()) {
						case F3_MUL:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(MUL);
						case F3_MULH:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(MULH);
						case F3_MULHSU:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(MULHSU);
						case F3_MULHU:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(MULHU);
						case F3_DIV:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(DIV);
						case F3_DIVU:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(DIVU);
						case F3_REM:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(REM);
						case F3_REMU:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(REMU);
					}
					break;
			}
			break;
		}

		case OP_ADDW: {
			switch (instr.funct7()) {
				case F7_ADDW:
					switch (instr.funct3()) {
						case F3_ADDW:
							MATCH_AND_RETURN_INSTR_OR_NOP(ADDW);
						case F3_SLLW:
							MATCH_AND_RETURN_INSTR_OR_NOP(SLLW);
						case F3_SRLW:
							MATCH_AND_RETURN_INSTR_OR_NOP(SRLW);
					}
					break;

				case F7_SUBW:
					switch (instr.funct3()) {
						case F3_SUBW:
							MATCH_AND_RETURN_INSTR_OR_NOP(SUBW);
						case F3_SRAW:
							MATCH_AND_RETURN_INSTR_OR_NOP(SRAW);
					}
					break;

				case F7_MULW:
					switch (instr.funct3()) {
						case F3_MULW:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(MULW);
						case F3_DIVW:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(DIVW);
						case F3_DIVUW:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(DIVUW);
						case F3_REMW:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(REMW);
						case F3_REMUW:
							REQUIRE_ISA(csr_misa::M);
							MATCH_AND_RETURN_INSTR_OR_NOP(REMUW);
					}
					break;
			}
			break;
		}

		case OP_FENCE: {
			switch (instr.funct3()) {
				case F3_FENCE:
					MATCH_AND_RETURN_INSTR(FENCE);
				case F3_FENCE_I:
					MATCH_AND_RETURN_INSTR(FENCE_I);
			}
			break;
		}

		case OP_ECALL: {
			switch (instr.funct3()) {
				case F3_SYS: {
					switch (instr.funct12()) {
						case F12_ECALL:
							MATCH_AND_RETURN_INSTR(ECALL);
						case F12_EBREAK:
							MATCH_AND_RETURN_INSTR(EBREAK);
						case F12_URET:
							MATCH_AND_RETURN_INSTR(URET);
						case F12_SRET:
							MATCH_AND_RETURN_INSTR(SRET);
						case F12_MRET:
							MATCH_AND_RETURN_INSTR(MRET);
						case F12_WFI:
							MATCH_AND_RETURN_INSTR(WFI);
						default:
							MATCH_AND_RETURN_INSTR(SFENCE_VMA);
					}
					break;
				}
				case F3_CSRRW:
					MATCH_AND_RETURN_INSTR(CSRRW);
				case F3_CSRRS:
					MATCH_AND_RETURN_INSTR(CSRRS);
				case F3_CSRRC:
					MATCH_AND_RETURN_INSTR(CSRRC);
				case F3_CSRRWI:
					MATCH_AND_RETURN_INSTR(CSRRWI);
				case F3_CSRRSI:
					MATCH_AND_RETURN_INSTR(CSRRSI);
				case F3_CSRRCI:
					MATCH_AND_RETURN_INSTR(CSRRCI);
			}
			break;
		}

		case OP_AMO: {
			switch (instr.funct5()) {
				case F5_LR_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(LR_D);
					} else {
						MATCH_AND_RETURN_INSTR(LR_W);
					}
				case F5_SC_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(SC_D);
					} else {
						MATCH_AND_RETURN_INSTR(SC_W);
					}
				case F5_AMOSWAP_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOSWAP_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOSWAP_W);
					}
				case F5_AMOADD_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOADD_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOADD_W);
					}
				case F5_AMOXOR_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOXOR_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOXOR_W);
					}
				case F5_AMOAND_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOAND_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOAND_W);
					}
				case F5_AMOOR_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOOR_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOOR_W);
					}
				case F5_AMOMIN_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOMIN_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOMIN_W);
					}
				case F5_AMOMAX_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOMAX_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOMAX_W);
					}
				case F5_AMOMINU_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOMINU_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOMINU_W);
					}
				case F5_AMOMAXU_W:
					REQUIRE_ISA(csr_misa::A);
					if (instr.funct3() == F3_AMO_D) {
						MATCH_AND_RETURN_INSTR(AMOMAXU_D);
					} else {
						MATCH_AND_RETURN_INSTR(AMOMAXU_W);
					}
			}
			break;
		}

		// RV32/64 F,D and Zfh Extension
		case OP_FMADD_S:
			switch (instr.funct2()) {
				case F2_FMADD_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FMADD_H);
				case F2_FMADD_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FMADD_S);
				case F2_FMADD_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FMADD_D);
			}
			break;

		case OP_FADD_S:
			switch (instr.funct7()) {
				case F7_FADD_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FADD_H);
				case F7_FADD_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FADD_S);
				case F7_FADD_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FADD_D);
				case F7_FSUB_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FSUB_H);
				case F7_FSUB_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FSUB_S);
				case F7_FSUB_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FSUB_D);
				case F7_FCVT_D_S:
					switch (instr.rs2()) {
						case RS2_FCVT_D_S:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_D_S);
						case RS2_FCVT_D_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_D_H);
					}
					break;
				case F7_FMUL_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FMUL_H);
				case F7_FMUL_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FMUL_S);
				case F7_FMUL_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FMUL_D);
				case F7_FDIV_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FDIV_H);
				case F7_FDIV_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FDIV_S);
				case F7_FDIV_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FDIV_D);
				case F7_FLE_H:
					switch (instr.funct3()) {
						case F3_FLE_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FLE_H);
						case F3_FLT_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FLT_H);
						case F3_FEQ_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FEQ_H);
					}
					break;
				case F7_FLE_S:
					switch (instr.funct3()) {
						case F3_FLE_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FLE_S);
						case F3_FLT_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FLT_S);
						case F3_FEQ_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FEQ_S);
					}
					break;
				case F7_FSGNJ_D:
					switch (instr.funct3()) {
						case F3_FSGNJ_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FSGNJ_D);
						case F3_FSGNJN_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FSGNJN_D);
						case F3_FSGNJX_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FSGNJX_D);
					}
					break;
				case F7_FMIN_H:
					switch (instr.funct3()) {
						case F3_FMIN_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FMIN_H);
						case F3_FMAX_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FMAX_H);
					}
					break;
				case F7_FMIN_S:
					switch (instr.funct3()) {
						case F3_FMIN_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FMIN_S);
						case F3_FMAX_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FMAX_S);
					}
					break;
				case F7_FMIN_D:
					switch (instr.funct3()) {
						case F3_FMIN_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FMIN_D);
						case F3_FMAX_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FMAX_D);
					}
					break;
				case F7_FCVT_S_D:
					switch (instr.rs2()) {
						case RS2_FCVT_S_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_S_D);
						case RS2_FCVT_S_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_S_H);
					}
					break;
				case F7_FCVT_H_S:
					switch (instr.rs2()) {
						case RS2_FCVT_H_S:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_H_S);
						case RS2_FCVT_H_D:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_H_D);
					}
					break;
				case F7_FSGNJ_H:
					switch (instr.funct3()) {
						case F3_FSGNJ_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FSGNJ_H);
						case F3_FSGNJN_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FSGNJN_H);
						case F3_FSGNJX_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FSGNJX_H);
					}
					break;
				case F7_FSGNJ_S:
					switch (instr.funct3()) {
						case F3_FSGNJ_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FSGNJ_S);
						case F3_FSGNJN_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FSGNJN_S);
						case F3_FSGNJX_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FSGNJX_S);
					}
					break;
				case F7_FLE_D:
					switch (instr.funct3()) {
						case F3_FLE_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FLE_D);
						case F3_FLT_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FLT_D);
						case F3_FEQ_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FEQ_D);
					}
					break;
				case F7_FCVT_H_W:
					switch (instr.rs2()) {
						case RS2_FCVT_H_W:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_H_W);
						case RS2_FCVT_H_WU:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_H_WU);
						case RS2_FCVT_H_L:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_H_L);
						case RS2_FCVT_H_LU:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_H_LU);
					}
					break;
				case F7_FCVT_S_W:
					switch (instr.rs2()) {
						case RS2_FCVT_S_W:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_S_W);
						case RS2_FCVT_S_WU:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_S_WU);
						case RS2_FCVT_S_L:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_S_L);
						case RS2_FCVT_S_LU:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_S_LU);
					}
					break;
				case F7_FCVT_D_W:
					switch (instr.rs2()) {
						case RS2_FCVT_D_W:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_D_W);
						case RS2_FCVT_D_WU:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_D_WU);
						case RS2_FCVT_D_L:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_D_L);
						case RS2_FCVT_D_LU:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_D_LU);
					}
					break;
				case F7_FCVT_W_D:
					switch (instr.rs2()) {
						case RS2_FCVT_W_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_W_D);
						case RS2_FCVT_WU_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_WU_D);
						case RS2_FCVT_L_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_L_D);
						case RS2_FCVT_LU_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCVT_LU_D);
					}
					break;
				case F7_FSQRT_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FSQRT_H);
				case F7_FSQRT_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FSQRT_S);
				case F7_FSQRT_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FSQRT_D);
				case F7_FCVT_W_H:
					switch (instr.rs2()) {
						case RS2_FCVT_W_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_W_H);
						case RS2_FCVT_WU_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_WU_H);
						case RS2_FCVT_L_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_L_H);
						case RS2_FCVT_LU_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCVT_LU_H);
					}
					break;
				case F7_FCVT_W_S:
					switch (instr.rs2()) {
						case RS2_FCVT_W_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_W_S);
						case RS2_FCVT_WU_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_WU_S);
						case RS2_FCVT_L_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_L_S);
						case RS2_FCVT_LU_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCVT_LU_S);
					}
					break;
				case F7_FMV_X_H:
					switch (instr.funct3()) {
						case F3_FMV_X_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FMV_X_H);
						case F3_FCLASS_H:
							REQUIRE_ISA(RV_ISA_Config::Zfh);
							MATCH_AND_RETURN_INSTR(FCLASS_H);
					}
					break;
				case F7_FMV_X_W:
					switch (instr.funct3()) {
						case F3_FMV_X_W:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FMV_X_W);
						case F3_FCLASS_S:
							REQUIRE_ISA(csr_misa::F);
							MATCH_AND_RETURN_INSTR(FCLASS_S);
					}
					break;
				case F7_FMV_X_D:
					switch (instr.funct3()) {
						case F3_FMV_X_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FMV_X_D);
						case F3_FCLASS_D:
							REQUIRE_ISA(csr_misa::D);
							MATCH_AND_RETURN_INSTR(FCLASS_D);
					}
					break;
				case F7_FMV_H_X:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FMV_H_X);
				case F7_FMV_W_X:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FMV_W_X);
				case F7_FMV_D_X:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FMV_D_X);
			}
			break;
		case OP_FLW:
			switch (instr.funct3()) {
				case F3_FLH:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FLH);
				case F3_FLW:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FLW);
				case F3_FLD:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FLD);

				// RV-V Extension Start -- Placeholder 3
				case 0:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 11:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLM_V);
											}
											break;
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE8_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E8_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E8_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E8_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E8_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E8_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E8_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E8_V);
											}
											break;
										case 16:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE8FF_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E8FF_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E8FF_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E8FF_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E8FF_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E8FF_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E8FF_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E8FF_V);
											}
											break;
										case 8:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL1RE8_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL2RE8_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL4RE8_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL8RE8_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSE8_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG2E8_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG3E8_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG4E8_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG5E8_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG6E8_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG7E8_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG8E8_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXEI8_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG2EI8_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG3EI8_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG4EI8_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG5EI8_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG6EI8_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG7EI8_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG8EI8_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXEI8_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG2EI8_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG3EI8_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG4EI8_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG5EI8_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG6EI8_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG7EI8_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG8EI8_V);
									}
									break;
							}
							break;
					}
					break;
				case 5:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE16_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E16_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E16_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E16_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E16_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E16_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E16_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E16_V);
											}
											break;
										case 16:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE16FF_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E16FF_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E16FF_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E16FF_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E16FF_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E16FF_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E16FF_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E16FF_V);
											}
											break;
										case 8:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL1RE16_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL2RE16_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL4RE16_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL8RE16_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSE16_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG2E16_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG3E16_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG4E16_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG5E16_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG6E16_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG7E16_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG8E16_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXEI16_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG2EI16_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG3EI16_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG4EI16_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG5EI16_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG6EI16_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG7EI16_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG8EI16_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXEI16_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG2EI16_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG3EI16_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG4EI16_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG5EI16_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG6EI16_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG7EI16_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG8EI16_V);
									}
									break;
							}
							break;
					}
					break;
				case 6:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE32_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E32_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E32_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E32_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E32_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E32_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E32_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E32_V);
											}
											break;
										case 16:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE32FF_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E32FF_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E32FF_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E32FF_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E32FF_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E32FF_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E32FF_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E32FF_V);
											}
											break;
										case 8:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL1RE32_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL2RE32_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL4RE32_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL8RE32_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSE32_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG2E32_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG3E32_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG4E32_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG5E32_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG6E32_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG7E32_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG8E32_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXEI32_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG2EI32_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG3EI32_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG4EI32_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG5EI32_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG6EI32_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG7EI32_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG8EI32_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXEI32_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG2EI32_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG3EI32_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG4EI32_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG5EI32_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG6EI32_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG7EI32_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG8EI32_V);
									}
									break;
							}
							break;
					}
					break;
				case 7:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE64_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E64_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E64_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E64_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E64_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E64_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E64_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E64_V);
											}
											break;
										case 16:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLE64FF_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG2E64FF_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG3E64FF_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG4E64FF_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG5E64FF_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG6E64FF_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG7E64FF_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VLSEG8E64FF_V);
											}
											break;
										case 8:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL1RE64_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL2RE64_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL4RE64_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VL8RE64_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSE64_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG2E64_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG3E64_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG4E64_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG5E64_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG6E64_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG7E64_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLSSEG8E64_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXEI64_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG2EI64_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG3EI64_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG4EI64_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG5EI64_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG6EI64_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG7EI64_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLUXSEG8EI64_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXEI64_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG2EI64_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG3EI64_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG4EI64_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG5EI64_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG6EI64_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG7EI64_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VLOXSEG8EI64_V);
									}
									break;
							}
							break;
					}
					break;
			}
			break;
			// RV-V Extension End -- Placeholder 3
		case OP_FSW:
			switch (instr.funct3()) {
				case F3_FSH:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FSH);
				case F3_FSW:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FSW);
				case F3_FSD:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FSD);
					// RV-V Extension Start -- Placeholder 8
				case 0:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 11:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSM_V);
											}
											break;
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSE8_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG2E8_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG3E8_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG4E8_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG5E8_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG6E8_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG7E8_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG8E8_V);
											}
											break;
										case 8:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VS1R_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VS2R_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VS4R_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VS8R_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSE8_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG2E8_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG3E8_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG4E8_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG5E8_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG6E8_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG7E8_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG8E8_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXEI8_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG2EI8_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG3EI8_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG4EI8_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG5EI8_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG6EI8_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG7EI8_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG8EI8_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXEI8_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG2EI8_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG3EI8_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG4EI8_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG5EI8_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG6EI8_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG7EI8_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG8EI8_V);
									}
									break;
							}
							break;
					}
					break;
				case 5:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSE16_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG2E16_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG3E16_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG4E16_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG5E16_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG6E16_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG7E16_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG8E16_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSE16_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG2E16_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG3E16_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG4E16_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG5E16_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG6E16_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG7E16_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG8E16_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXEI16_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG2EI16_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG3EI16_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG4EI16_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG5EI16_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG6EI16_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG7EI16_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG8EI16_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXEI16_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG2EI16_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG3EI16_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG4EI16_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG5EI16_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG6EI16_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG7EI16_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG8EI16_V);
									}
									break;
							}
							break;
					}
					break;
				case 6:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSE32_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG2E32_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG3E32_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG4E32_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG5E32_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG6E32_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG7E32_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG8E32_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSE32_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG2E32_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG3E32_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG4E32_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG5E32_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG6E32_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG7E32_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG8E32_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXEI32_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG2EI32_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG3EI32_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG4EI32_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG5EI32_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG6EI32_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG7EI32_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG8EI32_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXEI32_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG2EI32_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG3EI32_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG4EI32_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG5EI32_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG6EI32_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG7EI32_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG8EI32_V);
									}
									break;
							}
							break;
					}
					break;
				case 7:
					switch (instr.mew()) {
						case 0:
							switch (instr.mop()) {
								case 0:
									switch (instr.lusumop()) {
										case 0:
											switch (instr.nf()) {
												case 0:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSE64_V);
												case 1:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG2E64_V);
												case 2:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG3E64_V);
												case 3:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG4E64_V);
												case 4:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG5E64_V);
												case 5:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG6E64_V);
												case 6:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG7E64_V);
												case 7:
													REQUIRE_ISA(csr_misa::V);
													MATCH_AND_RETURN_INSTR(VSSEG8E64_V);
											}
											break;
									}
									break;
								case 2:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSE64_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG2E64_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG3E64_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG4E64_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG5E64_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG6E64_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG7E64_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSSSEG8E64_V);
									}
									break;
								case 1:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXEI64_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG2EI64_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG3EI64_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG4EI64_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG5EI64_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG6EI64_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG7EI64_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSUXSEG8EI64_V);
									}
									break;
								case 3:
									switch (instr.nf()) {
										case 0:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXEI64_V);
										case 1:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG2EI64_V);
										case 2:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG3EI64_V);
										case 3:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG4EI64_V);
										case 4:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG5EI64_V);
										case 5:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG6EI64_V);
										case 6:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG7EI64_V);
										case 7:
											REQUIRE_ISA(csr_misa::V);
											MATCH_AND_RETURN_INSTR(VSOXSEG8EI64_V);
									}
									break;
							}
							break;
					}
					break;
			}
			break;
			// RV-V Extension End -- Placeholder 8
		case OP_FMSUB_S:
			switch (instr.funct2()) {
				case F2_FMSUB_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FMSUB_H);
				case F2_FMSUB_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FMSUB_S);
				case F2_FMSUB_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FMSUB_D);
			}
			break;
		case OP_FNMSUB_S:
			switch (instr.funct2()) {
				case F2_FNMSUB_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FNMSUB_H);
				case F2_FNMSUB_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FNMSUB_S);
				case F2_FNMSUB_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FNMSUB_D);
			}
			break;
		case OP_FNMADD_S:
			switch (instr.funct2()) {
				case F2_FNMADD_H:
					REQUIRE_ISA(RV_ISA_Config::Zfh);
					MATCH_AND_RETURN_INSTR(FNMADD_H);
				case F2_FNMADD_S:
					REQUIRE_ISA(csr_misa::F);
					MATCH_AND_RETURN_INSTR(FNMADD_S);
				case F2_FNMADD_D:
					REQUIRE_ISA(csr_misa::D);
					MATCH_AND_RETURN_INSTR(FNMADD_D);
			}
			break;

		// RV-V Extension Start -- Placeholder 1
		case 87:
			switch (instr.funct3()) {
				case 7:
					switch (instr.bhigh()) {
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSETVLI);
						case 1:
							switch (instr.bhigh2()) {
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSETIVLI);
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSETVL);
							}
							break;
					}
					break;
				case 0:
					switch (instr.funct6()) {
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VADD_VV);
						case 2:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSUB_VV);
						case 16:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VADC_VVM);
							}
							break;
						case 17:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMADC_VVM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMADC_VV);
							}
							break;
						case 18:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSBC_VVM);
							}
							break;
						case 19:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSBC_VVM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSBC_VV);
							}
							break;
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAND_VV);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VOR_VV);
						case 11:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VXOR_VV);
						case 37:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLL_VV);
						case 40:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSRL_VV);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSRA_VV);
						case 44:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNSRL_WV);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNSRA_WV);
						case 24:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSEQ_VV);
						case 25:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSNE_VV);
						case 26:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLTU_VV);
						case 27:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLT_VV);
						case 28:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLEU_VV);
						case 29:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLE_VV);
						case 4:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMINU_VV);
						case 5:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMIN_VV);
						case 6:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMAXU_VV);
						case 7:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMAX_VV);
						case 23:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMERGE_VVM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMV_V_V);
							}
							break;
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSADDU_VV);
						case 33:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSADD_VV);
						case 34:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSUBU_VV);
						case 35:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSUB_VV);
						case 39:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSMUL_VV);
						case 42:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSRL_VV);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSRA_VV);
						case 46:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNCLIPU_WV);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNCLIP_WV);
						case 48:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWREDSUMU_VS);
						case 49:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWREDSUM_VS);
						case 12:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VRGATHER_VV);
						case 14:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VRGATHEREI16_VV);
					}
					break;
				case 3:
					switch (instr.funct6()) {
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VADD_VI);
						case 3:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VRSUB_VI);
						case 16:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VADC_VIM);
							}
							break;
						case 17:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMADC_VIM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMADC_VI);
							}
							break;
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAND_VI);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VOR_VI);
						case 11:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VXOR_VI);
						case 37:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLL_VI);
						case 40:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSRL_VI);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSRA_VI);
						case 44:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNSRL_WI);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNSRA_WI);
						case 24:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSEQ_VI);
						case 25:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSNE_VI);
						case 28:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLEU_VI);
						case 29:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLE_VI);
						case 30:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSGTU_VI);
						case 31:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSGT_VI);
						case 23:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMERGE_VIM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMV_V_I);
							}
							break;
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSADDU_VI);
						case 33:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSADD_VI);
						case 42:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSRL_VI);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSRA_VI);
						case 46:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNCLIPU_WI);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNCLIP_WI);
						case 14:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLIDEUP_VI);
						case 15:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLIDEDOWN_VI);
						case 12:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VRGATHER_VI);
						case 39:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMV_NR_R_V);
					}
					break;
				case 4:
					switch (instr.funct6()) {
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VADD_VX);
						case 2:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSUB_VX);
						case 3:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VRSUB_VX);
						case 16:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VADC_VXM);
							}
							break;
						case 17:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMADC_VXM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMADC_VX);
							}
							break;
						case 18:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSBC_VXM);
							}
							break;
						case 19:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSBC_VXM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSBC_VX);
							}
							break;
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAND_VX);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VOR_VX);
						case 11:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VXOR_VX);
						case 37:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLL_VX);
						case 40:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSRL_VX);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSRA_VX);
						case 44:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNSRL_WX);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNSRA_WX);
						case 24:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSEQ_VX);
						case 25:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSNE_VX);
						case 26:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLTU_VX);
						case 27:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLT_VX);
						case 28:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLEU_VX);
						case 29:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSLE_VX);
						case 30:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSGTU_VX);
						case 31:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMSGT_VX);
						case 4:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMINU_VX);
						case 5:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMIN_VX);
						case 6:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMAXU_VX);
						case 7:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMAX_VX);
						case 23:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMERGE_VXM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMV_V_X);
							}
							break;
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSADDU_VX);
						case 33:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSADD_VX);
						case 34:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSUBU_VX);
						case 35:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSUB_VX);
						case 39:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSMUL_VX);
						case 42:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSRL_VX);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSSRA_VX);
						case 46:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNCLIPU_WX);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNCLIP_WX);
						case 14:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLIDEUP_VX);
						case 15:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLIDEDOWN_VX);
						case 12:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VRGATHER_VX);
					}
					break;
				case 2:
					switch (instr.funct6()) {
						case 49:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADD_VV);
						case 51:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUB_VV);
						case 48:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADDU_VV);
						case 50:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUBU_VV);
						case 53:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADD_WV);
						case 55:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUB_WV);
						case 52:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADDU_WV);
						case 54:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUBU_WV);
						case 18:
							switch (instr.rs1()) {
								case 6:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VZEXT_VF2);
								case 7:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSEXT_VF2);
								case 4:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VZEXT_VF4);
								case 5:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSEXT_VF4);
								case 2:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VZEXT_VF8);
								case 3:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VSEXT_VF8);
							}
							break;
						case 37:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMUL_VV);
						case 39:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMULH_VV);
						case 36:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMULHU_VV);
						case 38:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMULHSU_VV);
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VDIVU_VV);
						case 33:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VDIV_VV);
						case 34:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREMU_VV);
						case 35:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREM_VV);
						case 59:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMUL_VV);
						case 56:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMULU_VV);
						case 58:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMULSU_VV);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMACC_VV);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNMSAC_VV);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMADD_VV);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNMSUB_VV);
						case 60:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACCU_VV);
						case 61:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACC_VV);
						case 63:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACCSU_VV);
						case 8:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAADDU_VV);
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAADD_VV);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VASUBU_VV);
						case 11:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VASUB_VV);
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDSUM_VS);
						case 6:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDMAXU_VS);
						case 7:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDMAX_VS);
						case 4:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDMINU_VS);
						case 5:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDMIN_VS);
						case 1:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDAND_VS);
						case 2:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDOR_VS);
						case 3:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREDXOR_VS);
						case 25:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMAND_MM);
						case 29:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMNAND_MM);
						case 24:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMANDN_MM);
						case 27:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMXOR_MM);
						case 26:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMOR_MM);
						case 30:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMNOR_MM);
						case 28:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMORN_MM);
						case 31:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMXNOR_MM);
						case 16:
							switch (instr.rs1()) {
								case 16:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VCPOP_M);
								case 17:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFIRST_M);
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMV_X_S);
							}
							break;
						case 20:
							switch (instr.rs1()) {
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSBF_M);
								case 3:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSIF_M);
								case 2:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMSOF_M);
								case 16:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VIOTA_M);
								case 17:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VID_V);
							}
							break;
						case 23:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VCOMPRESS_VM);
					}
					break;
				case 6:
					switch (instr.funct6()) {
						case 49:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADD_VX);
						case 51:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUB_VX);
						case 48:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADDU_VX);
						case 50:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUBU_VX);
						case 53:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADD_WX);
						case 55:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUB_WX);
						case 52:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWADDU_WX);
						case 54:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWSUBU_WX);
						case 37:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMUL_VX);
						case 39:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMULH_VX);
						case 36:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMULHU_VX);
						case 38:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMULHSU_VX);
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VDIVU_VX);
						case 33:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VDIV_VX);
						case 34:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREMU_VX);
						case 35:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VREM_VX);
						case 59:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMUL_VX);
						case 56:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMULU_VX);
						case 58:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMULSU_VX);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMACC_VX);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNMSAC_VX);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMADD_VX);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VNMSUB_VX);
						case 60:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACCU_VX);
						case 61:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACC_VX);
						case 63:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACCSU_VX);
						case 62:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VWMACCUS_VX);
						case 8:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAADDU_VX);
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VAADD_VX);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VASUBU_VX);
						case 11:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VASUB_VX);
						case 16:
							switch (instr.lusumop()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VMV_S_X);
							}
							break;
						case 14:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLIDE1UP_VX);
						case 15:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VSLIDE1DOWN_VX);
					}
					break;
				case 1:
					switch (instr.funct6()) {
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFADD_VV);
						case 2:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSUB_VV);
						case 48:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWADD_VV);
						case 50:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWSUB_VV);
						case 52:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWADD_WV);
						case 54:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWSUB_WV);
						case 36:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMUL_VV);
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFDIV_VV);
						case 56:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWMUL_VV);
						case 44:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMACC_VV);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMACC_VV);
						case 46:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMSAC_VV);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMSAC_VV);
						case 40:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMADD_VV);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMADD_VV);
						case 42:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMSUB_VV);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMSUB_VV);
						case 60:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWMACC_VV);
						case 61:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWNMACC_VV);
						case 62:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWMSAC_VV);
						case 63:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWNMSAC_VV);
						case 19:
							switch (instr.rs1()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFSQRT_V);
								case 4:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFRSQRT7_V);
								case 5:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFREC7_V);
								case 16:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCLASS_V);
							}
							break;
						case 4:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMIN_VV);
						case 6:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMAX_VV);
						case 8:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSGNJ_VV);
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSGNJN_VV);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSGNJX_VV);
						case 24:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFEQ_VV);
						case 28:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFNE_VV);
						case 27:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFLT_VV);
						case 25:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFLE_VV);
						case 18:
							switch (instr.rs1()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCVT_XU_F_V);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCVT_X_F_V);
								case 6:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCVT_RTZ_XU_F_V);
								case 7:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCVT_RTZ_X_F_V);
								case 2:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCVT_F_XU_V);
								case 3:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFCVT_F_X_V);
								case 8:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_XU_F_V);
								case 9:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_X_F_V);
								case 14:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_RTZ_XU_F_V);
								case 15:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_RTZ_X_F_V);
								case 10:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_F_XU_V);
								case 11:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_F_X_V);
								case 12:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFWCVT_F_F_V);
								case 16:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_XU_F_W);
								case 17:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_X_F_W);
								case 22:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_RTZ_XU_F_W);
								case 23:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_RTZ_X_F_W);
								case 18:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_F_XU_W);
								case 19:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_F_X_W);
								case 20:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_F_F_W);
								case 21:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFNCVT_ROD_F_F_W);
							}
							break;
						case 1:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFREDUSUM_VS);
						case 3:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFREDOSUM_VS);
						case 7:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFREDMAX_VS);
						case 5:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFREDMIN_VS);
						case 49:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWREDUSUM_VS);
						case 51:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWREDOSUM_VS);
						case 16:
							switch (instr.rs1()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFMV_F_S);
							}
							break;
					}
					break;
				case 5:
					switch (instr.funct6()) {
						case 0:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFADD_VF);
						case 2:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSUB_VF);
						case 39:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFRSUB_VF);
						case 48:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWADD_VF);
						case 50:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWSUB_VF);
						case 52:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWADD_WF);
						case 54:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWSUB_WF);
						case 36:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMUL_VF);
						case 32:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFDIV_VF);
						case 33:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFRDIV_VF);
						case 56:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWMUL_VF);
						case 44:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMACC_VF);
						case 45:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMACC_VF);
						case 46:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMSAC_VF);
						case 47:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMSAC_VF);
						case 40:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMADD_VF);
						case 41:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMADD_VF);
						case 42:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMSUB_VF);
						case 43:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFNMSUB_VF);
						case 60:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWMACC_VF);
						case 61:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWNMACC_VF);
						case 62:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWMSAC_VF);
						case 63:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFWNMSAC_VF);
						case 4:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMIN_VF);
						case 6:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFMAX_VF);
						case 8:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSGNJ_VF);
						case 9:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSGNJN_VF);
						case 10:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSGNJX_VF);
						case 24:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFEQ_VF);
						case 28:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFNE_VF);
						case 27:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFLT_VF);
						case 25:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFLE_VF);
						case 29:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFGT_VF);
						case 31:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VMFGE_VF);
						case 23:
							switch (instr.vm()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFMERGE_VFM);
								case 1:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFMV_V_F);
							}
							break;
						case 16:
							switch (instr.lusumop()) {
								case 0:
									REQUIRE_ISA(csr_misa::V);
									MATCH_AND_RETURN_INSTR(VFMV_S_F);
							}
							break;
						case 14:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSLIDE1UP_VF);
						case 15:
							REQUIRE_ISA(csr_misa::V);
							MATCH_AND_RETURN_INSTR(VFSLIDE1DOWN_VF);
					}
					break;
			}
			break;
			// RV-V Extension End -- Placeholder 1
	}

	return UNDEF;
}
